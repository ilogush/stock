import { NextApiRequest, NextApiResponse } from 'next';
import { supabaseAdmin } from '../../../lib/supabaseAdmin';
import { withPermissions, RoleChecks } from '../../../lib/api/roleAuth';

export default withPermissions(
  RoleChecks.canViewRealization,
  '–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º, –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –∏ –∫–ª–∞–¥–æ–≤—â–∏–∫–∞–º'
)(async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === 'GET') {
    try {
      const { page = '1', limit = '20', search } = req.query;
      const pageNum = parseInt(page as string);
      const limitNum = parseInt(limit as string);
      const offset = (pageNum - 1) * limitNum;

      // –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π
      let query = supabaseAdmin
        .from('realization')
        .select('*', { count: 'exact' })
        .order('created_at', { ascending: false });

      // üîç –ù–û–í–´–ô –ü–û–ò–°–ö –ø–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
      let searchRealizationIds: number[] = [];
      if (search && typeof search === 'string' && search.trim()) {
        const searchTerm = search.trim().toLowerCase();
        
        // –ò—â–µ–º –ø–æ —Ç–æ–≤–∞—Ä–∞–º –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
        // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
        const { data: articleProducts } = await supabaseAdmin
          .from('products')
          .select('id')
          .ilike('article', `%${searchTerm}%`);
        
        if (articleProducts && articleProducts.length > 0) {
          // –ò—â–µ–º —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å —ç—Ç–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
          const productIds = articleProducts.map((p: any) => p.id);
          const { data: realizationItems } = await supabaseAdmin
            .from('realization_items')
            .select('id')
            .in('product_id', productIds);
          
          if (realizationItems && realizationItems.length > 0) {
            searchRealizationIds = Array.from(new Set(realizationItems.map((r: any) => r.id)));
          }
        } else {
          // –ï—Å–ª–∏ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞
          const { data: nameProducts } = await supabaseAdmin
            .from('products')
            .select('id')
            .ilike('name', `%${searchTerm}%`);
          
          if (nameProducts && nameProducts.length > 0) {
            const productIds = nameProducts.map((p: any) => p.id);
            const { data: realizationItems } = await supabaseAdmin
              .from('realization_items')
              .select('id')
              .in('product_id', productIds);
            
            if (realizationItems && realizationItems.length > 0) {
              searchRealizationIds = Array.from(new Set(realizationItems.map((r: any) => r.id)));
            }
          } else {
            // –ï—Å–ª–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ø–æ –±—Ä–µ–Ω–¥—É
            const { data: brandProducts } = await supabaseAdmin
              .from('products')
              .select('id, brand:brands(name)')
              .ilike('brand.name', `%${searchTerm}%`);
            
            if (brandProducts && brandProducts.length > 0) {
              const filteredBrandProducts = brandProducts.filter((p: any) => 
                p.brand && p.brand.name && p.brand.name.toLowerCase().includes(searchTerm)
              );
              if (filteredBrandProducts.length > 0) {
                const productIds = filteredBrandProducts.map((p: any) => p.id);
                const { data: realizationItems } = await supabaseAdmin
                  .from('realization_items')
                  .select('id')
                  .in('product_id', productIds);
                
                if (realizationItems && realizationItems.length > 0) {
                  searchRealizationIds = Array.from(new Set(realizationItems.map((r: any) => r.id)));
                }
              }
            }
            
            // –ï—Å–ª–∏ –ø–æ –±—Ä–µ–Ω–¥—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ø–æ —Ü–≤–µ—Ç—É
            if (searchRealizationIds.length === 0) {
              // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ü–≤–µ—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
              const { data: matchingColors } = await supabaseAdmin
                .from('colors')
                .select('id')
                .ilike('name', `%${searchTerm}%`);
              
              if (matchingColors && matchingColors.length > 0) {
                // –ü–æ–ª—É—á–∞–µ–º ID —Ü–≤–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—Ö–æ–¥—è—Ç –ø–æ–¥ –ø–æ–∏—Å–∫
                const matchingColorIds = matchingColors.map((c: any) => c.id);
                
                // –¢–µ–ø–µ—Ä—å –∏—â–µ–º —Ç–æ–≤–∞—Ä—ã —Å —ç—Ç–∏–º–∏ —Ü–≤–µ—Ç–∞–º–∏
                const { data: colorProducts } = await supabaseAdmin
                  .from('products')
                  .select('id')
                  .in('color_id', matchingColorIds);
                
                if (colorProducts && colorProducts.length > 0) {
                  const productIds = colorProducts.map((p: any) => p.id);
                  const { data: realizationItems } = await supabaseAdmin
                    .from('realization_items')
                    .select('id')
                    .in('product_id', productIds);
                  
                  if (realizationItems && realizationItems.length > 0) {
                    searchRealizationIds = Array.from(new Set(realizationItems.map((r: any) => r.id)));
                  }
                }
              }
            }
          }
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è–º
        if (searchRealizationIds.length > 0) {
          query = query.in('id', searchRealizationIds);
        } else {
          // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          query = query.eq('id', -1);
        }
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
      const { data: realizations, error, count } = await query
        .range(offset, offset + limitNum - 1);

      if (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π:', error);
        return res.status(500).json({ 
          error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π',
          realizations: [],
          pagination: { total: 0, page: pageNum, limit: limitNum, totalPages: 0 }
        });
      }

      const realizationsList = realizations || [];
      const total = count || 0;

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
      const userIds = Array.from(new Set(
        realizationsList.flatMap((r: any) => [r.sender_id, r.recipient_id]).filter(Boolean)
      ));

      let usersMap: Record<string, any> = {};
      if (userIds.length > 0) {
        const { data: users } = await supabaseAdmin
          .from('users')
          .select('id, first_name, last_name')
          .in('id', userIds);
        
        usersMap = Object.fromEntries(
          (users || []).map((u: any) => [u.id, u])
        );
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è—Ö
      let itemsData: any[] = [];
      
      if (realizationsList.length > 0) {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–≤—è–∑—å
        const { data: items } = await supabaseAdmin
          .from('realization_items')
          .select(`
            id,
            product_id,
            size_code,
            qty,
            created_at,
            products!realization_items_product_id_fkey(id, article, color_id)
          `)
          .order('created_at');

        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π
        itemsData = (items || []).filter((item: any) => {
          return realizationsList.some((realization: any) => {
            const itemTime = new Date(item.created_at).getTime();
            const realizationTime = new Date(realization.created_at).getTime();
            const timeDiff = Math.abs(itemTime - realizationTime);
            return timeDiff <= 60000; // ¬±1 –º–∏–Ω—É—Ç–∞
          });
        });
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ —Ü–≤–µ—Ç–æ–≤
      const colorIds = Array.from(new Set(
        itemsData.map((item: any) => item.products?.color_id).filter(Boolean)
      ));
      
      let colorsMap: Record<string, string> = {};
      if (colorIds.length > 0) {
        const { data: colors } = await supabaseAdmin
          .from('colors')
          .select('id, name')
          .in('id', colorIds);
        
        colorsMap = Object.fromEntries(
          (colors || []).map((c: any) => [c.id.toString(), c.name])
        );
      }

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è–º
      const itemsByRealization: Record<string, any[]> = {};
      const totalsByRealization: Record<string, number> = {};

      itemsData.forEach((item: any) => {
        // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–∑–¥–∞–Ω—ã –î–û —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–≤–∞—Ä —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
        const possibleRealizations = realizationsList.filter((realization: any) => {
          const itemTime = new Date(item.created_at).getTime();
          const realizationTime = new Date(realization.created_at).getTime();
          const timeDiff = itemTime - realizationTime; // –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ç–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω –ø–æ—Å–ª–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
          return timeDiff >= 0 && timeDiff <= 60000; // –¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 1 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
        });

        // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏, –±–µ—Ä–µ–º —Å–∞–º—É—é –±–ª–∏–∑–∫—É—é –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        let matchingRealization = null;
        if (possibleRealizations.length > 0) {
          matchingRealization = possibleRealizations.reduce((closest, current) => {
            const itemTime = new Date(item.created_at).getTime();
            const closestTime = new Date(closest.created_at).getTime();
            const currentTime = new Date(current.created_at).getTime();
            const closestDiff = itemTime - closestTime;
            const currentDiff = itemTime - currentTime;
            return currentDiff < closestDiff ? current : closest;
          });
        }

        if (matchingRealization) {
          const realizationId = matchingRealization.id;
          if (!itemsByRealization[realizationId]) {
            itemsByRealization[realizationId] = [];
          }

          const itemData = {
            article: item.products?.article || '‚Äî',
            size: item.size_code || '‚Äî',
            color: colorsMap[item.products?.color_id] || '‚Äî',
            qty: item.qty || 0
          };

          itemsByRealization[realizationId].push(itemData);
          totalsByRealization[realizationId] = (totalsByRealization[realizationId] || 0) + (item.qty || 0);
        }
      });

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      const enrichedRealizations = realizationsList.map((realization: any) => ({
        id: realization.id,
        created_at: realization.created_at,
        updated_at: realization.updated_at,
        notes: realization.notes,
        sender_name: (() => {
          const user = usersMap[realization.sender_id];
          return user ? `${user.first_name || ''} ${user.last_name || ''}`.trim() : '‚Äî';
        })(),
        recipient_name: (() => {
          const user = usersMap[realization.recipient_id];
          return user ? `${user.first_name || ''} ${user.last_name || ''}`.trim() : '‚Äî';
        })(),
        total_items: totalsByRealization[realization.id] || 0,
        items: itemsByRealization[realization.id] || [],
        first_article: itemsByRealization[realization.id]?.[0]?.article || '‚Äî',
        first_size: itemsByRealization[realization.id]?.[0]?.size || '‚Äî',
        first_color: itemsByRealization[realization.id]?.[0]?.color || '‚Äî'
      }));

      const totalPages = Math.ceil(total / limitNum);

      return res.status(200).json({
        realizations: enrichedRealizations,
        pagination: {
          total,
          page: pageNum,
          limit: limitNum,
          totalPages
        }
      });

    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
      return res.status(500).json({ 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        realizations: [],
        pagination: { total: 0, page: 1, limit: 20, totalPages: 0 }
      });
    }
  }

  return res.status(405).json({ error: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' });
});