import { NextApiRequest, NextApiResponse } from 'next';
import { supabaseAdmin } from '../../../lib/supabaseAdmin';
import { withPerformanceTracking } from '../../../lib/performanceTracker';

async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === 'GET') {
    try {
      // üöÄ –ö–≠–®–ò–†–û–í–ê–ù–ò–ï –¥–ª—è —Å–∫–ª–∞–¥—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
      res.setHeader('Cache-Control', 'public, max-age=30, stale-while-revalidate=60');

      const { brand_id, category_id, category, page = '1', limit = '50', search } = req.query as Record<string,string>;

      const pageNum = parseInt(page) || 1;
      const limitNum = parseInt(limit);
      const offsetNum = (pageNum - 1) * limitNum;

      const appliedCategory = category_id || category;

      // 0) –ö–∞—Ä—Ç–∞ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ code ‚Üí name
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
      const { data: colorsData, error: colorsErr } = await supabaseAdmin
        .from('colors')
        .select('id,name');
      if (colorsErr) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–≤–µ—Ç–æ–≤:', colorsErr);
      }
      const codeToName = new Map((colorsData||[]).map((c:any)=>[c.id.toString(), c.name] as const));

      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ –ø–æ—Å—Ç—É–ø–∏–ª–∏ —á–µ—Ä–µ–∑ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
      let query = supabaseAdmin
        .from('receipt_items')
        .select(`
          qty,
          size_code,
          product_id,
          created_at,
          product:products(
            id,
            name,
            article,
            category_id,
            color_id,
            brand:brands(name)
          )
        `);

      if (brand_id) {
        query = query.eq('product.brand_id', brand_id);
      }

      // üîç –û–ë–™–ï–î–ò–ù–ï–ù–ù–´–ô –ü–û–ò–°–ö –ø–æ —Å–∫–ª–∞–¥—É
      if (search && search.trim()) {
        // –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL-encoded –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        const decodedSearch = decodeURIComponent(search.trim());
        const searchTerm = decodedSearch.toLowerCase();
        console.log('–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫:', search);
        console.log('–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫:', decodedSearch);
        console.log('–ü–æ–∏—Å–∫–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω:', searchTerm);
        let allProductIds: number[] = [];
        
        // 1. –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
        const { data: articleProducts } = await supabaseAdmin
          .from('products')
          .select('id')
          .ilike('article', `%${searchTerm}%`);
        
        if (articleProducts && articleProducts.length > 0) {
          allProductIds.push(...articleProducts.map((p: any) => p.id));
        }
        
        // 2. –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        const { data: nameProducts } = await supabaseAdmin
          .from('products')
          .select('id')
          .ilike('name', `%${searchTerm}%`);
        
        if (nameProducts && nameProducts.length > 0) {
          allProductIds.push(...nameProducts.map((p: any) => p.id));
        }
        
        // 3. –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –±—Ä–µ–Ω–¥—É
        const { data: brandProducts } = await supabaseAdmin
          .from('products')
          .select('id, brand:brands(name)')
          .ilike('brand.name', `%${searchTerm}%`);
        
        if (brandProducts && brandProducts.length > 0) {
          const filteredBrandProducts = brandProducts.filter((p: any) => 
            p.brand && p.brand.name && p.brand.name.toLowerCase().includes(searchTerm)
          );
          if (filteredBrandProducts.length > 0) {
            allProductIds.push(...filteredBrandProducts.map((p: any) => p.id));
          }
        }
        
        // 4. –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ —Ü–≤–µ—Ç—É - –Ω–∞–ø—Ä—è–º—É—é –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ü–≤–µ—Ç–∞
        if (searchTerm) {
          console.log('–ü–æ–∏—Å–∫ –ø–æ —Ü–≤–µ—Ç—É –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞:', searchTerm);
          
          // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ü–≤–µ—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç)
          const { data: matchingColors, error: colorError } = await supabaseAdmin
            .from('colors')
            .select('id, name')
            .ilike('name', `%${searchTerm}%`);
          
          if (colorError) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ü–≤–µ—Ç–æ–≤:', colorError);
          }
          
          console.log('–ù–∞–π–¥–µ–Ω—ã —Ü–≤–µ—Ç–∞:', matchingColors);
          
          if (matchingColors && matchingColors.length > 0) {
            // –ü–æ–ª—É—á–∞–µ–º ID —Ü–≤–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—Ö–æ–¥—è—Ç –ø–æ–¥ –ø–æ–∏—Å–∫
            const matchingColorIds = matchingColors.map((c: any) => c.id);
            console.log('ID –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤:', matchingColorIds);
            
            // –¢–µ–ø–µ—Ä—å –∏—â–µ–º —Ç–æ–≤–∞—Ä—ã —Å —ç—Ç–∏–º–∏ —Ü–≤–µ—Ç–∞–º–∏
            const { data: colorProducts, error: productError } = await supabaseAdmin
              .from('products')
              .select('id, color_id')
              .in('color_id', matchingColorIds);
            
            if (productError) {
              console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ü–≤–µ—Ç–∞–º:', productError);
            }
            
            console.log('–ù–∞–π–¥–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã –ø–æ —Ü–≤–µ—Ç–∞–º:', colorProducts);
            
            if (colorProducts && colorProducts.length > 0) {
              const productIds = colorProducts.map((p: any) => p.id);
              allProductIds.push(...productIds);
              console.log('–î–æ–±–∞–≤–ª–µ–Ω—ã ID —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ü–≤–µ—Ç–∞–º:', productIds);
            }
          }
        }
        
        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
        const uniqueProductIds = Array.from(new Set(allProductIds));
        if (uniqueProductIds.length > 0) {
          query = query.in('product_id', uniqueProductIds);
        } else {
          // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          query = query.eq('product_id', -1);
        }
      }

      let categoryProductIds: number[] = [];
      if (appliedCategory && appliedCategory !== 'all') {
        const { data: catProds, error: catErr } = await supabaseAdmin
          .from('products')
          .select('id')
          .eq('category_id', appliedCategory);
        if (catErr) {
          console.error('–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', catErr);
        } else {
          categoryProductIds = (catProds || []).map((p: any) => p.id);
          if (categoryProductIds.length === 0) {
            return res.status(200).json({ items: [], pagination: { total: 0, page: pageNum, limit: limitNum, totalPages: 0 } });
          }
          query = query.in('product_id', categoryProductIds);
        }
      }

      const { data: receiptItems, error } = await query;

      if (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π:', error);
        return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π' });
      }

      // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—é
      let lastArticle = null;
      let lastArticleDate = null;
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ
      const { data: lastReceipt, error: receiptError } = await supabaseAdmin
        .from('receipts')
        .select('id, created_at')
        .order('created_at', { ascending: false })
        .limit(1);
      
      if (receiptError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:', receiptError);
      } else if (lastReceipt && lastReceipt.length > 0) {
        const lastReceiptId = lastReceipt[0].id;
        lastArticleDate = lastReceipt[0].created_at;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
        const { data: lastReceiptItems, error: itemsError } = await supabaseAdmin
          .from('receipt_items')
          .select(`
            product_id,
            product:products(article)
          `)
          .gte('created_at', new Date(new Date(lastReceipt[0].created_at).getTime() - 60000).toISOString())
          .lte('created_at', new Date(new Date(lastReceipt[0].created_at).getTime() + 60000).toISOString())
          .limit(1);
        
        if (itemsError) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:', itemsError);
        } else if (lastReceiptItems && lastReceiptItems.length > 0) {
          lastArticle = lastReceiptItems[0].product?.article;
        }
      }
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞
      const lastArticleItems = (receiptItems || []).filter((row: any) => 
        row.product?.article === lastArticle
      );

      // –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –ø–æ product_id, size_code, color_id (–∏–∑ products) —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞
      const itemMap: Record<string, any> = {};
      lastArticleItems.forEach((row: any) => {
        const productId = row.product?.id || row.product_id;
        const colorId = parseInt(row.product?.color_id) || row.product?.color_id; // –ë–µ—Ä–µ–º color_id –∏–∑ products
        const key = `${productId}_${row.size_code}_${colorId}`;
        
        if (!itemMap[key]) {
          itemMap[key] = {
            id: productId,
            name: row.product?.name || null,
            article: row.product?.article || null,
            brandName: row.product?.brand?.name || null,
            size_code: row.size_code,
            color_id: colorId,
            qty: 0,
            last_receipt_date: row.created_at // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
          };
        }
        
        itemMap[key].qty += row.qty || 0;
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –∑–∞–ø–∏—Å—å –Ω–æ–≤–µ–µ
        if (new Date(row.created_at) > new Date(itemMap[key].last_receipt_date)) {
          itemMap[key].last_receipt_date = row.created_at;
        }
      });

      // 2) –í—ã—á–∏—Ç–∞–µ–º —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞
      let realItems: any[] = [];
      if (Object.keys(itemMap).length > 0 && lastArticle) {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞
        const lastArticleProductIds = Array.from(new Set(
          lastArticleItems.map((item: any) => item.product?.id || item.product_id)
        ));
        
        const { data: realData } = await supabaseAdmin
        .from('realization_items')
        .select(`
          product_id,
          size_code,
          qty,
            product:products(color_id, article)
          `)
          .in('product_id', lastArticleProductIds);
        realItems = realData || [];
      }
      (realItems||[]).forEach((r:any)=>{
        const colorId = parseInt(r.product?.color_id) || r.product?.color_id; // –ë–µ—Ä–µ–º color_id –∏–∑ products
        const key = `${r.product_id}_${r.size_code}_${colorId}`;
        if (itemMap[key] !== undefined) {
          itemMap[key].qty = Math.max(0, itemMap[key].qty - (r.qty||0));
        }
      });

      // –ù–û–í–´–ô –§–û–†–ú–ê–¢: –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–æ–≤–∞—Ä–∞–º, —Ä–∞–∑–º–µ—Ä—ã –∫–∞–∫ —Å—Ç–æ–ª–±—Ü—ã, —Ü–≤–µ—Ç–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
      const productMap: Record<string, any> = {};
      const allSizes = new Set<string>();
      
      Object.values(itemMap).forEach((item: any) => {
        if ((item.qty||0) <= 0) return; // –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–ª–µ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏
        
        const productId = item.id;
        allSizes.add(item.size_code);
        
        if (!productMap[productId]) {
          productMap[productId] = {
            id: productId,
            name: item.name,
            article: item.article,
            brandName: item.brandName,
            colors: {} as Record<string, any>,
            total: 0,
            last_receipt_date: item.last_receipt_date
          };
        }
        
        const entry = productMap[productId];
        const colorId = item.color_id;
        const colorName = codeToName.get(colorId.toString()) || colorId.toString();
        
        if (!entry.colors[colorId]) {
          entry.colors[colorId] = {
            colorId: colorId,
            colorName: colorName,
            sizes: {} as Record<string, number>,
            total: 0
          };
        }
        
        entry.colors[colorId].sizes[item.size_code] = (entry.colors[colorId].sizes[item.size_code] || 0) + (item.qty || 0);
        entry.colors[colorId].total += (item.qty || 0);
        entry.total += (item.qty || 0);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Ç–æ–≤–∞—Ä –Ω–æ–≤–µ–µ
        if (new Date(item.last_receipt_date) > new Date(entry.last_receipt_date)) {
          entry.last_receipt_date = item.last_receipt_date;
        }
      });

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã
      const sortedSizes = Array.from(allSizes).sort((a, b) => {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É (XS, S, M, L, XL, XXL, XXXL)
        const sizeOrder = ['XS', 'S', 'M', 'L', 'XL', 'XXL', 'XXXL'];
        const aIndex = sizeOrder.indexOf(a.toUpperCase());
        const bIndex = sizeOrder.indexOf(b.toUpperCase());
        
        if (aIndex === -1 && bIndex === -1) return a.localeCompare(b);
        if (aIndex === -1) return 1;
        if (bIndex === -1) return -1;
        return aIndex - bIndex;
      });

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const items = Object.values(productMap).map((product: any) => ({
        ...product,
        colors: Object.values(product.colors).map((color: any) => ({
          ...color,
          sizes: sortedSizes.map(size => color.sizes[size] || 0)
        }))
      }));

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏
      const productIds = items.map((product: any) => product.id);
      let imagesByProductId: Record<number, string[]> = {};
      let productsMap: Record<string, any> = {};
      
      if (productIds.length > 0) {
        try {
          // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞—Ä—Ç–∏–∫—É–ª—ã —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–∫–ª–∞–¥–µ
          const articleCodes = items.map((product: any) => product.article);
          
          // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å –Ω—É–∂–Ω—ã–º–∏ –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏
          const { data: allProducts, error: productsError } = await supabaseAdmin
            .from('products')
            .select('id, article, color_id')
            .in('article', articleCodes);
            
          if (productsError) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', productsError);
          } else {
            // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏ —Ü–≤–µ—Ç—É
            productsMap = (allProducts || []).reduce((acc: Record<string, any>, product: any) => {
              const key = `${product.article}_${product.color_id}`;
              acc[key] = product;
              return acc;
            }, {});
            
            // –ü–æ–ª—É—á–∞–µ–º ID –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω—É–∂–Ω—ã–º–∏ –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏
            const allProductIds = (allProducts || []).map((p: any) => p.id);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —ç—Ç–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
            const { data: allImages, error: imagesError } = await supabaseAdmin
              .from('product_images')
              .select('product_id,image_url,created_at')
              .in('product_id', allProductIds)
              .order('created_at', { ascending: true });

            if (imagesError) {
              console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', imagesError);
            } else {
              imagesByProductId = (allImages || []).reduce((acc: Record<number, string[]>, row: any) => {
                const base = process.env.NEXT_PUBLIC_SUPABASE_URL?.replace(/\/$/, '') || '';
                const path = row.image_url.startsWith('images/') ? row.image_url : `images/${row.image_url}`;
                const fullUrl = row.image_url.startsWith('http')
                  ? row.image_url
                  : `${base}/storage/v1/object/public/${path}`;
                if (!acc[row.product_id]) acc[row.product_id] = [];
                acc[row.product_id].push(fullUrl);
                return acc;
              }, {});
            }
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
        }
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å —É—á–µ—Ç–æ–º —Ü–≤–µ—Ç–æ–≤
      const itemsWithImages = items.map((product: any) => {
        return {
          ...product,
          colors: product.colors.map((color: any) => {
            // –ò—â–µ–º —Ç–æ–≤–∞—Ä —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –∞—Ä—Ç–∏–∫—É–ª–æ–º –∏ —Ü–≤–µ—Ç–æ–º
            const key = `${product.article}_${color.colorId}`;
            const matchingProduct = productsMap[key] as any;
            
            // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä, –±–µ—Ä–µ–º –µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const productImages = matchingProduct ? (imagesByProductId[matchingProduct.id] || []) : [];
            
            return {
              ...color,
              images: productImages
            };
          })
        };
      });

      // –ü–∞–≥–∏–Ω–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–∫–ª–∞–¥–∞
      // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Ç–æ–≤–∞—Ä–∞
      const totalItems = itemsWithImages.length;
      const totalPages = 1;
      const paginatedItems = itemsWithImages;

      // –£–ë–ò–†–ê–Æ –ö–≠–®–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–• –°–ö–õ–ê–î–ê
      res.setHeader('Cache-Control', 'no-store, no-cache, must-revalidate');

      return res.status(200).json({
        items: paginatedItems,
        sizes: sortedSizes,
        lastArticle: lastArticle, // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∞—Ä—Ç–∏–∫—É–ª–µ
        lastArticleDate: lastArticleDate,
        pagination: { total: totalItems, page: 1, limit: limitNum, totalPages: totalPages }
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
      return res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  }

  return res.status(405).json({ error: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' });
}

// üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
export default withPerformanceTracking(handler, '/api/stock'); 