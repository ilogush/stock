
import { NextApiRequest, NextApiResponse } from 'next';
import { supabaseAdmin } from '../../../lib/supabaseAdmin';
import { 
  parsePaginationParams 
} from '../../../lib/api/standardResponse';
import { handleDatabaseError, handleGenericError } from '../../../lib/api/errorHandling';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === 'GET') {
    try {
      // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
      res.setHeader('Cache-Control', 'public, max-age=300, stale-while-revalidate=600');

      const { category, brand, search, fields } = req.query;
      const { page, limit, offset } = parsePaginationParams(req.query);
      
      // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è
      const selectFields = fields ? 
        (fields as string).split(',').join(',') : 
        `
          id,
          name,
          article,
          price,
          old_price,
          category_id,
          brand_id,
          color_id,
          is_popular,
          is_visible,
          created_at,
          brand:brands!products_brand_id_fkey (id, name),
          category:categories!products_category_id_fkey (id, name)
        `;

      // –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
      let query = supabaseAdmin
        .from('products')
        .select(selectFields, { count: 'exact' })
        .order('created_at', { ascending: false });

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      if (category) {
        query = query.eq('category_id', category);
      }

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –±—Ä–µ–Ω–¥—É
      if (brand) {
        query = query.eq('brand_id', brand);
      }

      // üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ü–û–ò–°–ö - –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –≤–º–µ—Å—Ç–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö
      if (search && typeof search === 'string' && search.trim()) {
        const searchTerm = search.trim();
        
        // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏ –Ω–∞–∑–≤–∞–Ω–∏—é
        const { data: directProducts } = await supabaseAdmin
          .from('products')
          .select('id')
          .or(`article.ilike.%${searchTerm}%,name.ilike.%${searchTerm}%`);
        
        // –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –±—Ä–µ–Ω–¥—É
        const { data: brandProducts } = await supabaseAdmin
          .from('products')
          .select('id, brand:brands!products_brand_id_fkey(name)')
          .ilike('brand.name', `%${searchTerm}%`);
        
        // –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ —Ü–≤–µ—Ç—É
        const { data: colorProducts } = await supabaseAdmin
          .from('products')
          .select('id, color:colors!products_color_id_fkey(name)')
          .ilike('color.name', `%${searchTerm}%`);
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ ID
        const allProductIds = new Set();
        if (directProducts) directProducts.forEach(p => allProductIds.add(p.id));
        if (brandProducts) brandProducts.forEach(p => allProductIds.add(p.id));
        if (colorProducts) colorProducts.forEach(p => allProductIds.add(p.id));
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º ID
        if (allProductIds.size > 0) {
          query = query.in('id', Array.from(allProductIds));
        } else {
          // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          return res.status(200).json({
            products: [],
            pagination: { total: 0, page, limit, totalPages: 0 }
          });
        }
      }

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
      query = query.range(offset, offset + limit - 1);

      const { data: products, error, count } = await query;

      if (error) {
        return handleDatabaseError(error, res);
      }

      return res.status(200).json({
        products: products || [],
        pagination: {
          total: count || 0,
          page,
          limit,
          totalPages: Math.ceil((count || 0) / limit)
        }
      });

    } catch (error) {
      return handleGenericError(error, res);
    }
  }

  return res.status(405).json({ error: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' });
};
