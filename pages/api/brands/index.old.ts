import { NextApiRequest, NextApiResponse } from 'next';
import { supabaseAdmin } from '../../../lib/supabaseAdmin';
import { createListResponse } from '../../../lib/api/standardResponse';
import { withPermissions, RoleChecks } from '../../../lib/api/roleAuth';

export default withPermissions(
  RoleChecks.canViewBrands,
  '–î–æ—Å—Ç—É–ø –∫ –±—Ä–µ–Ω–¥–∞–º —Ä–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º, –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –∏ –∫–ª–∞–¥–æ–≤—â–∏–∫–∞–º'
)(async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === 'GET') {
    try {
      // üöÄ –ö–≠–®–ò–†–û–í–ê–ù–ò–ï –¥–ª—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ - –±—Ä–µ–Ω–¥—ã —Ä–µ–¥–∫–æ –∏–∑–º–µ–Ω—è—é—Ç—Å—è
      res.setHeader('Cache-Control', 'public, max-age=3600, stale-while-revalidate=86400');
      const { search } = req.query;

      let query = supabaseAdmin
        .from('brands')
        .select(`
          *,
          company:companies(id, name, address, phone)
        `)
        .order('id');

      const { data: brands, error } = await query;

      if (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–µ–Ω–¥–æ–≤:', error);
        return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–µ–Ω–¥–æ–≤' });
      }

      // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
      let filteredBrands = brands || [];
      if (search && typeof search === 'string' && search.trim() !== '') {
        const searchTerm = decodeURIComponent(search.trim()).toLowerCase();
        // –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –±—Ä–µ–Ω–¥–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        
        filteredBrands = (brands || []).filter((brand: any) => {
          return (
            brand.id.toString().includes(searchTerm) ||
            (brand.name && brand.name.toLowerCase().includes(searchTerm)) ||
            (brand.company && brand.company.name && brand.company.name.toLowerCase().includes(searchTerm))
          );
        });
      }

      if (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–µ–Ω–¥–æ–≤:', error);
        return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–µ–Ω–¥–æ–≤' });
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±—Ä–µ–Ω–¥–∞
      const brandsWithManagers = await Promise.all((filteredBrands || []).map(async (brand: any) => {
        try {
          const { data: managersData, error: managersError } = await supabaseAdmin
            .from('brand_managers')
            .select(`
              user:users(id, first_name, last_name)
            `)
            .eq('brand_id', brand.id);

          let managers: any[] = [];
          if (!managersError && managersData) {
            managers = managersData.map((item: any) => ({
              id: item.user?.id,
              name: `${item.user?.first_name || ''} ${item.user?.last_name || ''}`.trim()
            }));
          }

          return {
            ...brand,
            managers: managers,
            managers_count: managers.length
          };
        } catch (managerError) {
  
          return {
            ...brand,
            managers: [],
            managers_count: 0
          };
        }
      }));

      // üìä –°–¢–ê–ù–î–ê–†–¢–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –û–¢–í–ï–¢
      const response = createListResponse(
        brandsWithManagers || [],
        (brandsWithManagers || []).length,
        1,
        (brandsWithManagers || []).length,
        'brands',
        {
          search: search || null,
          total_managers: (brandsWithManagers || []).reduce((sum: number, b: any) => sum + (b.managers_count || 0), 0)
        }
      );
      
      return res.status(200).json(response);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
      return res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  }

  return res.status(405).json({ error: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' });
}); 