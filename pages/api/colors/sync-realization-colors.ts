import { NextApiRequest, NextApiResponse } from 'next';
import { supabaseAdmin } from '../../../lib/supabaseAdmin';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' });
  }

  try {
    console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π...');

    // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ü–≤–µ—Ç–∞ –∏–∑ —Å–∫–ª–∞–¥–∞ (receipt_items)
    const { data: colorsData, error: colorsErr } = await supabaseAdmin
      .from('colors')
      .select('id,name');
    if (colorsErr) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–≤–µ—Ç–æ–≤:', colorsErr);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–≤–µ—Ç–æ–≤' });
    }
    const codeToName = new Map((colorsData||[]).map((c:any)=>[c.id.toString(), c.name] as const));

    // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –Ω–∞ —Å–∫–ª–∞–¥–µ
    const { data: receiptItems, error: receiptError } = await supabaseAdmin
      .from('receipt_items')
      .select(`color_id`)
      .not('color_id', 'is', null);
    if (receiptError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–∞:', receiptError);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–∞' });
    }

    const stockColorIds = new Set();
    (receiptItems || []).forEach(item => {
      if (item.color_id) {
        stockColorIds.add(item.color_id);
      }
    });

    // 2. –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç–∞, —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è—Ö
    const { data: realizationItems, error: realizationError } = await supabaseAdmin
      .from('realization_items')
      .select(`color_id`)
      .not('color_id', 'is', null);
    if (realizationError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π:', realizationError);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π' });
    }

    const realizationColorIds = new Set();
    (realizationItems || []).forEach(item => {
      if (item.color_id) {
        realizationColorIds.add(item.color_id);
      }
    });

    // 3. –ù–∞—Ö–æ–¥–∏–º —Ü–≤–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –Ω–∞ —Å–∫–ª–∞–¥–µ, –Ω–æ –Ω–µ—Ç –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è—Ö
    const missingColorIds = Array.from(stockColorIds).filter(colorId => 
      !realizationColorIds.has(colorId)
    );

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${missingColorIds.length} —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏`);

    if (missingColorIds.length === 0) {
      return res.json({
        message: '–í—Å–µ —Ü–≤–µ—Ç–∞ —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã',
        added: 0,
        colors: []
      });
    }

    // 4. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –≤ realization_items –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–≥–æ —Ü–≤–µ—Ç–∞
    const addedColors = [];
    
    for (const colorId of missingColorIds) {
      try {
        // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä —Å —ç—Ç–∏–º —Ü–≤–µ—Ç–æ–º –Ω–∞ —Å–∫–ª–∞–¥–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
        const { data: sampleItem, error: sampleError } = await supabaseAdmin
          .from('receipt_items')
          .select('product_id, size_code')
          .eq('color_id', colorId)
          .limit(1)
          .single();

        if (sampleError || !sampleItem) {
          console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –¥–ª—è —Ü–≤–µ—Ç–∞ ID ${colorId}`);
          continue;
        }

        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ realization_items (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ = 0)
        const { error: insertError } = await supabaseAdmin
          .from('realization_items')
          .insert({
            product_id: sampleItem.product_id,
            size_code: sampleItem.size_code,
            color_id: colorId,
            qty: 0, // –¢–µ—Å—Ç–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            created_at: new Date().toISOString()
          });

        if (insertError) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ü–≤–µ—Ç–∞ ${colorId} –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:`, insertError);
        } else {
          const colorName = codeToName.get(colorId.toString()) || `–¶–≤–µ—Ç ID ${colorId}`;
          addedColors.push({
            id: colorId,
            name: colorName
          });
          console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ü–≤–µ—Ç: ${colorName} (ID: ${colorId})`);
        }
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ü–≤–µ—Ç–∞ ${colorId}:`, error);
      }
    }

    console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ–±–∞–≤–ª–µ–Ω–æ ${addedColors.length} —Ü–≤–µ—Ç–æ–≤`);

    return res.json({
      message: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
      added: addedColors.length,
      total_missing: missingColorIds.length,
      colors: addedColors,
      details: {
        stock_colors: stockColorIds.size,
        realization_colors_before: realizationColorIds.size,
        missing_colors: missingColorIds.length,
        added_colors: addedColors.length
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ü–≤–µ—Ç–æ–≤:', error);
    return res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ü–≤–µ—Ç–æ–≤',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    });
  }
}

