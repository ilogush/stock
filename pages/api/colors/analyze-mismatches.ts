import { NextApiRequest, NextApiResponse } from 'next';
import { supabaseAdmin } from '../../../lib/supabaseAdmin';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'GET') {
    return res.status(405).json({ error: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' });
  }

  try {
    console.log('üîç –ê–Ω–∞–ª–∏–∑ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –≤ —Ü–≤–µ—Ç–∞—Ö...');

    // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏–∑ —Å–∫–ª–∞–¥–∞
    console.log('üì¶ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
    const { data: colorsData, error: colorsErr } = await supabaseAdmin
      .from('colors')
      .select('id,name');
    if (colorsErr) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–≤–µ—Ç–æ–≤:', colorsErr);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–≤–µ—Ç–æ–≤' });
    }
    const codeToName = new Map((colorsData||[]).map((c:any)=>[c.id.toString(), c.name] as const));

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π
    const { data: receiptItems, error: receiptError } = await supabaseAdmin
      .from('receipt_items')
      .select(`product_id,size_code,qty,color_id`)
      .order('product_id, size_code');
    if (receiptError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π:', receiptError);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π' });
    }

    const stockColorNames = new Set();
    const stockColorIds = new Set();
    
    (receiptItems || []).forEach(item => {
      if (item.color_id && codeToName.has(item.color_id.toString())) {
        const colorName = codeToName.get(item.color_id.toString());
        if (colorName) {
          stockColorNames.add(colorName);
          stockColorIds.add(item.color_id);
        }
      }
    });

    // 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏–∑ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π
    console.log('üì§ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞ –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è—Ö...');
    const { data: realizationItems, error: realizationError } = await supabaseAdmin
      .from('realization_items')
      .select(`product_id,size_code,qty,color_id`);

    if (realizationError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π:', realizationError);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π' });
    }

    const realizationColorNames = new Set();
    const realizationColorIds = new Set();
    
    (realizationItems || []).forEach(item => {
      if (item.color_id && codeToName.has(item.color_id.toString())) {
        const colorName = codeToName.get(item.color_id.toString());
        if (colorName) {
          realizationColorNames.add(colorName);
          realizationColorIds.add(item.color_id);
        }
      }
    });

    // 3. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–≤–µ—Ç–∞—Ö
    const { data: allColors, error: allColorsError } = await supabaseAdmin
      .from('colors')
      .select('id, name, hex_code')
      .order('id');

    if (allColorsError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö —Ü–≤–µ—Ç–æ–≤:', allColorsError);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö —Ü–≤–µ—Ç–æ–≤' });
    }

    // 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
    const stockOnlyColors = Array.from(stockColorNames).filter(color => 
      !realizationColorNames.has(color)
    );
    
    const realizationOnlyColors = Array.from(realizationColorNames).filter(color => 
      !stockColorNames.has(color)
    );

    // 5. –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —Ü–≤–µ—Ç–µ
    const colorDetails = allColors.map(color => {
      const usedIn = [];
      if (stockColorIds.has(color.id)) usedIn.push('—Å–∫–ª–∞–¥');
      if (realizationColorIds.has(color.id)) usedIn.push('—Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏');
      
      return {
        id: color.id,
        name: color.name,
        hex_code: color.hex_code,
        used_in: usedIn,
        is_mismatched: usedIn.length === 1 && usedIn[0] === '—Å–∫–ª–∞–¥'
      };
    });

    // 6. –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ü–≤–µ—Ç–∞ (–µ—Å—Ç—å –Ω–∞ —Å–∫–ª–∞–¥–µ, –Ω–æ –Ω–µ—Ç –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è—Ö)
    const problematicColors = colorDetails.filter(color => color.is_mismatched);

    console.log(`‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ ${problematicColors.length} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤`);

    return res.json({
      summary: {
        total_colors: allColors.length,
        stock_colors: stockColorNames.size,
        realization_colors: realizationColorNames.size,
        stock_only_colors: stockOnlyColors.length,
        realization_only_colors: realizationOnlyColors.length,
        problematic_colors: problematicColors.length
      },
      mismatches: {
        stock_only: stockOnlyColors,
        realization_only: realizationOnlyColors
      },
      problematic_colors: problematicColors,
      all_colors: colorDetails
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ü–≤–µ—Ç–æ–≤:', error);
    return res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ü–≤–µ—Ç–æ–≤',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    });
  }
}
