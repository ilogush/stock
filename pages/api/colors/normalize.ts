import { NextApiRequest, NextApiResponse } from 'next';
import { supabaseAdmin } from '../../../lib/supabaseAdmin';
import { normalizeColorName, getHexFromName } from '../../../lib/unifiedColorService';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' });
  }

  try {
    console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é —Ü–≤–µ—Ç–æ–≤...');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ü–≤–µ—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const { data: colors, error: fetchError } = await supabaseAdmin
      .from('colors')
      .select('id, name, hex_code');

    if (fetchError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–≤–µ—Ç–æ–≤:', fetchError);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–≤–µ—Ç–æ–≤' });
    }

    if (!colors || colors.length === 0) {
      return res.json({ 
        message: '–¶–≤–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', 
        updated: 0,
        colors: []
      });
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${colors.length} —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏`);

    const updates = [];
    const errors = [];

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–∞–∂–¥—ã–π —Ü–≤–µ—Ç
    for (const color of colors) {
      try {
        const normalizedName = normalizeColorName(color.name);
        const normalizedHex = getHexFromName(color.name);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if (normalizedName !== color.name || normalizedHex !== color.hex_code) {
          updates.push({
            id: color.id,
            old_name: color.name,
            old_hex: color.hex_code,
            new_name: normalizedName,
            new_hex: normalizedHex
          });

          // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          const { error: updateError } = await supabaseAdmin
            .from('colors')
            .update({
              name: normalizedName,
              hex_code: normalizedHex
            })
            .eq('id', color.id);

          if (updateError) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–≤–µ—Ç–∞ ${color.id}:`, updateError);
            errors.push({
              id: color.id,
              name: color.name,
              error: updateError.message
            });
          }
        }
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ü–≤–µ—Ç–∞ ${color.id}:`, error);
        errors.push({
          id: color.id,
          name: color.name,
          error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        });
      }
    }

    console.log(`‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updates.length}, –û—à–∏–±–æ–∫: ${errors.length}`);

    return res.json({
      message: '–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
      updated: updates.length,
      errors: errors.length,
      details: {
        updates: updates,
        errors: errors
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ü–≤–µ—Ç–æ–≤:', error);
    return res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ü–≤–µ—Ç–æ–≤',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    });
  }
}

