import { NextApiRequest, NextApiResponse } from 'next';
import { supabaseAdmin } from '../../../lib/supabaseAdmin';
import { 
  createListResponse, 
  createErrorResponse, 
  parsePaginationParams 
} from '../../../lib/api/standardResponse';
import { handleDatabaseError, handleGenericError } from '../../../lib/api/errorHandling';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === 'GET') {
    try {
      // üöÄ –ö–≠–®–ò–†–û–í–ê–ù–ò–ï –¥–ª—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ - —Ü–≤–µ—Ç–∞ —Ä–µ–¥–∫–æ –∏–∑–º–µ–Ω—è—é—Ç—Å—è
      res.setHeader('Cache-Control', 'public, max-age=3600, stale-while-revalidate=86400');
      
      const { search = '' } = req.query;
      const { page, limit, offset } = parsePaginationParams(req.query);

      // üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–≤–µ—Ç–∞
      const { data: colors, error: colorsError } = await supabaseAdmin
        .from('colors')
        .select('id, name, hex_code, created_at')
        .order('name', { ascending: true });

      if (colorsError) {
        return handleDatabaseError(colorsError, res, 'colors fetch');
      }

      // üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü–∞–∫–µ—Ç–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Ü–≤–µ—Ç–æ–≤ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
      const colorIds = (colors || []).map((c: any) => c.id);
      let productCounts: Record<number, number> = {};
      
      if (colorIds.length > 0) {
        const { data: productCountData } = await supabaseAdmin
          .from('products')
          .select('color_id')
          .in('color_id', colorIds);
        
        // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ü–≤–µ—Ç–∞
        productCounts = (productCountData || []).reduce((acc: Record<number, number>, product: any) => {
          acc[product.color_id] = (acc[product.color_id] || 0) + 1;
          return acc;
        }, {});
      }

      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HEX-–∫–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–∞
      const getHexFromName = (name: string): string => {
        const colorMap: { [key: string]: string } = {
          '–ë–µ–ª—ã–π': '#FFFFFF',
          '–ß–µ—Ä–Ω—ã–π': '#000000',
          '–ö—Ä–∞—Å–Ω—ã–π': '#FF0000',
          '–ó–µ–ª–µ–Ω—ã–π': '#00FF00',
          '–°–∏–Ω–∏–π': '#0000FF',
          '–ñ–µ–ª—Ç—ã–π': '#FFFF00',
          '–†–æ–∑–æ–≤—ã–π': '#FFC0CB',
          '–û—Ä–∞–Ω–∂–µ–≤—ã–π': '#FFA500',
          '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π': '#800080',
          '–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π': '#A52A2A',
          '–°–µ—Ä—ã–π': '#808080',
          '–ë–µ–∂–µ–≤—ã–π': '#F5DEB3',
          '–ë–∏—Ä—é–∑–æ–≤—ã–π': '#40E0D0',
          '–ò–∑—É–º—Ä—É–¥–Ω—ã–π': '#50C878',
          '–°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π': '#87CEEB',
          '–°–µ—Ä—ã–π –º–µ–ª–∞–Ω–∂': '#C0C0C0',
          '–ê—Å—Å–æ—Ä—Ç–∏': '#FFD700',
          '–¢–µ—Ä—Ä–∞–∫–æ—Ç–æ–≤—ã–π': '#E2725B',
          '—Å–ø—Ä—É—Ç': '#8B4513',
          '–ª–æ–∑–∞': '#228B22',
          '–ó–∞–π—á–∏–∫–∏ –Ω–∞ —Ä–æ–∑–æ–≤–æ–º': '#FFB6C1',
          '–ù–µ–∂–Ω–æ-—Ä–æ–∑–æ–≤—ã–π': '#FFE4E1',
          '–Ø—Ä–∫–æ-—Ä–æ–∑–æ–≤—ã–π': '#FF69B4',
          '–ü–∞—Å—Ç–µ–ª—å–Ω–æ-–≥–æ–ª—É–±–æ–π': '#E0F6FF',
          '–ú–∞–ª–∏–Ω–æ–≤—ã–π': '#DC143C',
          '–•–∞–∫–∏': '#78866B'
        };
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if (colorMap[name]) {
          return colorMap[name];
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        const normalizedName = name.toLowerCase();
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ä–æ–∑–æ–≤—ã—Ö —Ü–≤–µ—Ç–æ–≤
        if (normalizedName.includes('—Ä–æ–∑–æ–≤') || normalizedName.includes('pink')) {
          if (normalizedName.includes('—è—Ä–∫–æ') || normalizedName.includes('bright')) {
            return '#FF69B4'; // –Ø—Ä–∫–æ-—Ä–æ–∑–æ–≤—ã–π
          } else if (normalizedName.includes('–Ω–µ–∂–Ω–æ') || normalizedName.includes('soft')) {
            return '#FFE4E1'; // –ù–µ–∂–Ω–æ-—Ä–æ–∑–æ–≤—ã–π
          } else if (normalizedName.includes('—Å–≤–µ—Ç–ª–æ') || normalizedName.includes('light')) {
            return '#FFB6C1'; // –°–≤–µ—Ç–ª–æ-—Ä–æ–∑–æ–≤—ã–π
          } else if (normalizedName.includes('—Ç–µ–º–Ω–æ') || normalizedName.includes('dark')) {
            return '#FF1493'; // –¢–µ–º–Ω–æ-—Ä–æ–∑–æ–≤—ã–π
          } else {
            return '#FFC0CB'; // –û–±—ã—á–Ω—ã–π —Ä–æ–∑–æ–≤—ã–π
          }
        }
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –Ω–µ–∂–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
        if (normalizedName.includes('–Ω–µ–∂–Ω–æ') || normalizedName.includes('soft')) {
          if (normalizedName.includes('—Ä–æ–∑–æ–≤') || normalizedName.includes('pink')) {
            return '#FFE4E1'; // –ù–µ–∂–Ω–æ-—Ä–æ–∑–æ–≤—ã–π
          }
        }
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —è—Ä–∫–∏—Ö —Ü–≤–µ—Ç–æ–≤
        if (normalizedName.includes('—è—Ä–∫–æ') || normalizedName.includes('bright')) {
          if (normalizedName.includes('—Ä–æ–∑–æ–≤') || normalizedName.includes('pink')) {
            return '#FF69B4'; // –Ø—Ä–∫–æ-—Ä–æ–∑–æ–≤—ã–π
          }
        }
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Å–≤–µ—Ç–ª—ã—Ö —Ü–≤–µ—Ç–æ–≤
        if (normalizedName.includes('—Å–≤–µ—Ç–ª–æ') || normalizedName.includes('light')) {
          if (normalizedName.includes('—Ä–æ–∑–æ–≤') || normalizedName.includes('pink')) {
            return '#FFB6C1'; // –°–≤–µ—Ç–ª–æ-—Ä–æ–∑–æ–≤—ã–π
          } else if (normalizedName.includes('—Å–∏–Ω') || normalizedName.includes('–≥–æ–ª—É–±') || normalizedName.includes('blue')) {
            return '#87CEEB'; // –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π
          } else if (normalizedName.includes('–∑–µ–ª–µ–Ω') || normalizedName.includes('green')) {
            return '#90EE90'; // –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π
          } else if (normalizedName.includes('–∫—Ä–∞—Å–Ω') || normalizedName.includes('red')) {
            return '#FF6B6B'; // –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π
          }
        }
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Å–∏–Ω–∏—Ö —Ü–≤–µ—Ç–æ–≤
        if (normalizedName.includes('—Å–∏–Ω') || normalizedName.includes('–≥–æ–ª—É–±') || normalizedName.includes('blue')) {
          if (normalizedName.includes('—Å–≤–µ—Ç–ª–æ') || normalizedName.includes('light')) {
            return '#87CEEB'; // –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π
          } else if (normalizedName.includes('—Ç–µ–º–Ω–æ') || normalizedName.includes('dark')) {
            return '#000080'; // –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π
          } else {
            return '#0000FF'; // –û–±—ã—á–Ω—ã–π —Å–∏–Ω–∏–π
          }
        }
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –∑–µ–ª–µ–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
        if (normalizedName.includes('–∑–µ–ª–µ–Ω') || normalizedName.includes('green')) {
          if (normalizedName.includes('—Å–≤–µ—Ç–ª–æ') || normalizedName.includes('light')) {
            return '#90EE90'; // –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π
          } else if (normalizedName.includes('—Ç–µ–º–Ω–æ') || normalizedName.includes('dark')) {
            return '#006400'; // –¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π
          } else {
            return '#00FF00'; // –û–±—ã—á–Ω—ã–π –∑–µ–ª–µ–Ω—ã–π
          }
        }
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –∫—Ä–∞—Å–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
        if (normalizedName.includes('–∫—Ä–∞—Å–Ω') || normalizedName.includes('red')) {
          if (normalizedName.includes('—Å–≤–µ—Ç–ª–æ') || normalizedName.includes('light')) {
            return '#FF6B6B'; // –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π
          } else if (normalizedName.includes('—Ç–µ–º–Ω–æ') || normalizedName.includes('dark')) {
            return '#8B0000'; // –¢–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π
          } else {
            return '#FF0000'; // –û–±—ã—á–Ω—ã–π –∫—Ä–∞—Å–Ω—ã–π
          }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä–µ
        for (const [colorName, hexCode] of Object.entries(colorMap)) {
          if (normalizedName.includes(colorName.toLowerCase()) || 
              colorName.toLowerCase().includes(normalizedName)) {
            return hexCode;
          }
        }
        
        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        let hash = 0;
        for (let i = 0; i < name.length; i++) {
          hash = name.charCodeAt(i) + ((hash << 5) - hash);
        }
        
        const hue = Math.abs(hash) % 360;
        const saturation = 70 + (Math.abs(hash) % 30); // 70-100%
        const lightness = 45 + (Math.abs(hash) % 20); // 45-65%
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º HSL –≤ HEX
        const h = hue / 360;
        const s = saturation / 100;
        const l = lightness / 100;
        
        const hue2rgb = (p: number, q: number, t: number) => {
          if (t < 0) t += 1;
          if (t > 1) t -= 1;
          if (t < 1/6) return p + (q - p) * 6 * t;
          if (t < 1/2) return q;
          if (t < 2/3) return p + (q - p) * (2/3 - t) * 6;
          return p;
        };
        
        let r, g, b;
        if (s === 0) {
          r = g = b = l;
        } else {
          const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
          const p = 2 * l - q;
          r = hue2rgb(p, q, h + 1/3);
          g = hue2rgb(p, q, h);
          b = hue2rgb(p, q, h - 1/3);
        }
        
        const toHex = (c: number) => {
          const hex = Math.round(c * 255).toString(16);
          return hex.length === 1 ? '0' + hex : hex;
        };
        
        return `#${toHex(r)}${toHex(g)}${toHex(b)}`;
      };

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
      const processedColors = (colors || [])
        .map((color: any) => ({
          id: color.id,
          name: color.name,
          hex_code: getHexFromName(color.name),
          created_at: color.created_at,
          product_count: productCounts[color.id] || 0
        }))
        .reduce((acc: any[], color: any) => {
          // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –æ—Å—Ç–∞–≤–ª—è—è —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤
          const existingColor = acc.find(c => c.name === color.name);
          if (!existingColor) {
            acc.push(color);
          } else if (color.product_count > existingColor.product_count) {
            const index = acc.findIndex(c => c.name === color.name);
            acc[index] = color;
          }
          return acc;
        }, []);

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
      let filteredColors = processedColors;
      if (search && typeof search === 'string' && search.trim() !== '') {
        const searchTerm = decodeURIComponent(search.trim()).toLowerCase();
        
        filteredColors = processedColors.filter((color: any) => {
          return (
            (color.name && color.name.toLowerCase().includes(searchTerm)) ||
            (color.id && String(color.id).includes(searchTerm))
          );
        });
      }

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
      const total = filteredColors.length;
      const paginatedColors = filteredColors.slice(offset, offset + limit);

      // üìä –°–¢–ê–ù–î–ê–†–¢–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –û–¢–í–ï–¢
      const response = createListResponse(
        paginatedColors,
        total,
        page,
        limit,
        'colors',
        {
          search: search || null,
          uniqueColors: processedColors.length,
          totalProducts: processedColors.reduce((sum: number, c: any) => sum + (c.product_count || 0), 0)
        }
      );

      return res.status(200).json(response);

    } catch (error) {
      return handleGenericError(error, res, 'colors API');
    }
  }

  // –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥
  const errorResponse = createErrorResponse('–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
  return res.status(405).json(errorResponse);
}