import { NextApiRequest, NextApiResponse } from 'next';
import { supabaseAdmin } from '../../../lib/supabaseAdmin';
import { hashPassword } from '../../../lib/auth';
import { logUserActionDirect as logUserAction, getUserIdFromCookie } from '../../../lib/actionLogger';
import { withManagement, AuthenticatedRequest, logAccess } from '../../../lib/api/roleAuth';
import { createItemResponse, createErrorResponse } from '../../../lib/api/standardResponse';
import { handleDatabaseError, handleGenericError } from '../../../lib/api/errorHandling';

export default withManagement(async function handler(req: AuthenticatedRequest, res: NextApiResponse) {
  if (req.method === 'POST') {
    try {
      // üîí –õ–æ–≥–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      logAccess(req, 'CREATE_USER');
      
      const { email, password, role_id, first_name, last_name } = req.body;

      if (!email || !password) {
        return res.status(400).json({ error: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
      }

      const hashedPassword = await hashPassword(password);

      const { data, error } = await supabaseAdmin
        .from('users')
        .insert({
          email,
          password_hash: hashedPassword,
          role_id: role_id || 1,
          first_name: first_name || '',
          last_name: last_name || ''
        })
        .select('*')
        .single();

      if (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        const userId = getUserIdFromCookie(req);
        await logUserAction(userId, '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error', `–û—à–∏–±–∫–∞: ${error.message}`);
        
        if (error.code === '23505') {
          return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
        }
        return res.status(500).json({ error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}` });
      }

      // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userId = req.user!.id;
      await logUserAction(userId, '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'success', `–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${email}`);

      // –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –æ—Ç–≤–µ—Ç–∞
      const { password_hash: _, ...userWithoutPassword } = data;
      
      // üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
      const response = createItemResponse(userWithoutPassword, 'user', {
        created_by: req.user!.id,
        user_role: req.user!.role_id
      });

      return res.status(201).json(response);
    } catch (error) {
      return handleGenericError(error, res, 'user creation');
    }
  }

  // –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥
  const errorResponse = createErrorResponse('–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
  return res.status(405).json(errorResponse);
}); 