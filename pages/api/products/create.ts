import { NextApiRequest, NextApiResponse } from 'next';
import { supabaseAdmin } from '../../../lib/supabaseAdmin';
import { logUserActionDirect as logUserAction, getUserIdFromCookie } from '../../../lib/actionLogger';
import { translateSupabaseError } from '../../../lib/supabaseErrorTranslations';
import { withPermissions, RoleChecks, AuthenticatedRequest, logAccess } from '../../../lib/api/roleAuth';
import { createItemResponse, createErrorResponse } from '../../../lib/api/standardResponse';
import { handleDatabaseError, handleGenericError } from '../../../lib/api/errorHandling';
import { ValidationService } from '../../../lib/validationService';
import { DatabaseService } from '../../../lib/databaseService';

// –†–∞–∑—Ä–µ—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∞–¥–º–∏–Ω–∞–º, –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –∏ –∫–ª–∞–¥–æ–≤—â–∏–∫–∞–º
export default withPermissions(
  RoleChecks.canCreateProducts,
  '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤'
)(async function handler(req: AuthenticatedRequest, res: NextApiResponse) {
  if (req.method === 'POST') {
    try {
      // üîí –õ–æ–≥–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞
      logAccess(req, 'CREATE_PRODUCT');
      const {
        name,
        article,
        brand_id,
        category_id,
        color_id,
        price,
        old_price,
        is_popular,
        is_visible,
        composition,
        care_instructions
      } = req.body;

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞
      const validationData = {
        name,
        article,
        brand_id,
        category_id,
        color_id,
        price,
        old_price,
        composition
      };

      const validationResult = ValidationService.validateProduct(validationData);
      if (!ValidationService.validateAndSendErrors(res, validationResult)) {
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –∞—Ä—Ç–∏–∫—É–ª–æ–º –∏ —Ü–≤–µ—Ç–æ–º
      if (article) {
        let existingProduct = null;
        let checkError = null;

        if (color_id) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º –∏ —Ü–≤–µ—Ç–æ–º
          const result = await supabaseAdmin
            .from('products')
            .select('id, name, article, color_id')
            .eq('article', article)
            .eq('color_id', color_id)
            .single();
          
          existingProduct = result.data;
          checkError = result.error;
        } else {
          // –î–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —Ü–≤–µ—Ç–∞ –ù–ï –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ - —Ä–∞–∑—Ä–µ—à–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
          // existingProduct = null; // –£–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        }

        if (checkError && checkError.code !== 'PGRST116') { // PGRST116 = no rows returned
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞:', checkError);
          return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞' });
        }

        if (existingProduct) {
          return res.status(400).json({ 
            error: `–¢–æ–≤–∞—Ä —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º "${article}" –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ü–≤–µ—Ç–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ù–∞ –æ–¥–∏–Ω –∞—Ä—Ç–∏–∫—É–ª –∏ —Ü–≤–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞.`
          });
        }
      }



      // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
      const productData = {
        name: name.trim(),
        article: article.trim(),
        brand_id: parseInt(brand_id),
        category_id: parseInt(category_id),
        color_id: color_id,
        care_instructions: (care_instructions ?? '').toString().trim() || null,
        composition: composition.trim(),
        price: parseFloat(price),
        old_price: old_price ? parseFloat(old_price) : null,
        is_popular: is_popular || false,
        is_visible: is_visible !== undefined ? is_visible : true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };

      const { data: product, error } = await supabaseAdmin
        .from('products')
        .insert([productData])
        .select()
        .single();

      if (error) {
        const friendly = translateSupabaseError(error);
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
        const userId = getUserIdFromCookie(req);
        await logUserAction(userId, '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', 'error', `–û—à–∏–±–∫–∞: ${error.message}`);
        return res.status(400).json({ 
          error: friendly,
          details: error.message
        });
      }

      // üö´ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–ö–†–´–¢–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä —Å–æ–∑–¥–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
      const { data: productImages, error: imagesError } = await supabaseAdmin
        .from('product_images')
        .select('id')
        .eq('product_id', product.id);

      if (!imagesError && (!productImages || productImages.length === 0)) {
        // –¢–æ–≤–∞—Ä –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - —Å–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
        await supabaseAdmin
          .from('products')
          .update({ 
            is_visible: false, 
            updated_at: new Date().toISOString() 
          })
          .eq('id', product.id);
        
        console.log(`üö´ –¢–æ–≤–∞—Ä ${product.id} (${article}) —Å–∫—Ä—ã—Ç - –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
      }

      // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
      const userId = req.user!.id;
      await logUserAction(userId, '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', 'success', `${name} (${article})`);

      // üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
      const response = createItemResponse(product, 'product', {
        created_by: req.user!.id,
        user_role: req.user!.role_id
      });

      return res.status(201).json(response);
    } catch (error) {
      return handleGenericError(error, res, 'product creation');
    }
  }

  // –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥
  const errorResponse = createErrorResponse('–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
  return res.status(405).json(errorResponse);
}); 