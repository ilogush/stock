import { NextApiRequest, NextApiResponse } from 'next';
import { supabaseAdmin } from '../../../lib/supabaseAdmin';
import { cleanProductsText } from '../../../lib/textCleaner';
import { normalizeColorName } from '../../../lib/colorNormalizer';
import { 
  createListResponse, 
  createErrorResponse, 
  parsePaginationParams 
} from '../../../lib/api/standardResponse';
import { handleDatabaseError, handleGenericError } from '../../../lib/api/errorHandling';
import { withPerformanceTracking } from '../../../lib/performanceTracker';

async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === 'GET') {
    try {
      // –û—Ç–∫–ª—é—á–µ–Ω–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
      res.setHeader('Cache-Control', 'no-store, no-cache, must-revalidate');

      const { category, brand, search, fields } = req.query;
      const { page, limit, offset } = parsePaginationParams(req.query);
      
      // üìä –°–ï–õ–ï–ö–¢–ò–í–ù–´–ï –ü–û–õ–Ø –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
      const selectFields = fields ? 
        (fields as string).split(',').join(',') : 
        `
          id,
          name,
          article,
          price,
          old_price,
          category_id,
          brand_id,
          color_id,
          is_popular,
          is_visible,
          created_at,
          brand:brands!products_brand_id_fkey (id, name),
          category:categories!products_category_id_fkey (id, name)
        `;

      // üîç –ü–û–°–¢–†–û–ï–ù–ò–ï –ó–ê–ü–†–û–°–ê - –ø–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
      let query = supabaseAdmin
        .from('products')
        .select(selectFields, { count: 'exact' })
        .order('created_at', { ascending: false });

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      if (category) {
        query = query.eq('category_id', category);
      }

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –±—Ä–µ–Ω–¥—É
      if (brand) {
        query = query.eq('brand_id', brand);
      }

      // üîç –û–ë–™–ï–î–ò–ù–ï–ù–ù–´–ô –ü–û–ò–°–ö –ø–æ —Ç–æ–≤–∞—Ä–∞–º
      if (search && typeof search === 'string' && search.trim() !== '') {
        const searchTerm = decodeURIComponent(search.trim()).toLowerCase();
        let allProductIds: number[] = [];
        
        // 1. –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
        const { data: articleProducts } = await supabaseAdmin
          .from('products')
          .select('id')
          .ilike('article', `%${searchTerm}%`);
        
        if (articleProducts && articleProducts.length > 0) {
          allProductIds.push(...articleProducts.map((p: any) => p.id));
        }
        
        // 2. –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        const { data: nameProducts } = await supabaseAdmin
          .from('products')
          .select('id')
          .ilike('name', `%${searchTerm}%`);
        
        if (nameProducts && nameProducts.length > 0) {
          allProductIds.push(...nameProducts.map((p: any) => p.id));
        }
        
        // 3. –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –±—Ä–µ–Ω–¥—É
        const { data: brandProducts } = await supabaseAdmin
          .from('products')
          .select('id, brand:brands(name)')
          .ilike('brand.name', `%${searchTerm}%`);
        
        if (brandProducts && brandProducts.length > 0) {
          const filteredBrandProducts = brandProducts.filter((p: any) => 
            p.brand && p.brand.name && p.brand.name.toLowerCase().includes(searchTerm)
          );
          if (filteredBrandProducts.length > 0) {
            allProductIds.push(...filteredBrandProducts.map((p: any) => p.id));
          }
        }
        
        // 4. –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ —Ü–≤–µ—Ç—É - –Ω–∞–ø—Ä—è–º—É—é –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ü–≤–µ—Ç–∞
        if (searchTerm) {
          // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ü–≤–µ—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
          const { data: matchingColors } = await supabaseAdmin
            .from('colors')
            .select('id')
            .ilike('name', `%${searchTerm}%`);
          
          if (matchingColors && matchingColors.length > 0) {
            // –ü–æ–ª—É—á–∞–µ–º ID —Ü–≤–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—Ö–æ–¥—è—Ç –ø–æ–¥ –ø–æ–∏—Å–∫
            const matchingColorIds = matchingColors.map((c: any) => c.id);
            
            // –¢–µ–ø–µ—Ä—å –∏—â–µ–º —Ç–æ–≤–∞—Ä—ã —Å —ç—Ç–∏–º–∏ —Ü–≤–µ—Ç–∞–º–∏
            const { data: colorProducts } = await supabaseAdmin
              .from('products')
              .select('id')
              .in('color_id', matchingColorIds);
            
            if (colorProducts && colorProducts.length > 0) {
              const productIds = colorProducts.map((p: any) => p.id);
              allProductIds.push(...productIds);
            }
          }
        }
        
        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
        const uniqueProductIds = Array.from(new Set(allProductIds));
        if (uniqueProductIds.length > 0) {
          query = query.in('id', uniqueProductIds);
        } else {
          // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          query = query.eq('id', -1);
        }
      }

      // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      const { count: totalCount, error: countError } = await query;
      if (countError) {
        return handleDatabaseError(countError, res, 'products count');
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
      const { data: products, error: productsError } = await query
        .range(offset, offset + limit - 1);

      if (productsError) {
        return handleDatabaseError(productsError, res, 'products fetch');
      }

      // üöÄ –ü–ê–ö–ï–¢–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
      const productIds = (products || []).map((p: any) => p.id);
      let imagesByProductId: Record<number, string[]> = {};
      
      if (productIds.length > 0) {
        const { data: allImages, error: imagesError } = await supabaseAdmin
          .from('product_images')
          .select('product_id, image_url')
          .in('product_id', productIds)
          .order('created_at', { ascending: true });

        if (imagesError) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', imagesError);
        } else {
          imagesByProductId = (allImages || []).reduce((acc: Record<number, string[]>, row: any) => {
            const base = process.env.NEXT_PUBLIC_SUPABASE_URL?.replace(/\/$/, '') || '';
            const path = row.image_url.startsWith('images/') ? row.image_url : `images/${row.image_url}`;
            const fullUrl = row.image_url.startsWith('http')
              ? row.image_url
              : `${base}/storage/v1/object/public/${path}`;
            
            if (!acc[row.product_id]) acc[row.product_id] = [];
            acc[row.product_id].push(fullUrl);
            return acc;
          }, {});
        }
      }

      // üé® –ü–ê–ö–ï–¢–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –¶–í–ï–¢–û–í –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
      const colorIds = Array.from(new Set((products || []).map((p: any) => p.color_id).filter(Boolean)));
      let colorNameByKey: Record<string, string> = {};
      
      if (colorIds.length > 0) {
        const { data: colorsData, error: colorsError } = await supabaseAdmin
          .from('colors')
          .select('id, name')
          .in('id', colorIds);

        if (colorsError) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–≤–µ—Ç–æ–≤:', colorsError);
        } else {
          (colorsData || []).forEach((c: any) => {
            colorNameByKey[c.id.toString()] = normalizeColorName(c.name);
          });
        }
      }

      // üì¶ –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–•
      const processedProducts = (products || []).map((product: any) => {
        const images = imagesByProductId[product.id] || [];
        const colorKey = product.color_id ? String(product.color_id) : '';
        const colorName = colorKey ? (colorNameByKey[colorKey] || null) : null;
        
        // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è text[] ‚Üí —Å—Ç—Ä–æ–∫–∏
        const normalize = (v: any) => Array.isArray(v) ? v.join(' ') : v;
        
        const processedProduct = {
          ...product,
          images,
          brandName: product.brand?.name || null,
          categoryName: product.category?.name || null,
          colorName,
          care_instructions: normalize(product.care_instructions),
          features: normalize(product.features),
          technical_specs: normalize(product.technical_specs),
          materials_info: normalize(product.materials_info),
        };
        
        // –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
        return cleanProductsText([processedProduct])[0];
      });

      // üìä –í–°–ï –¢–û–í–ê–†–´: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ /products
      // –¢–æ–≤–∞—Ä—ã –±–µ–∑ —Ñ–æ—Ç–æ –±—É–¥—É—Ç –∏–º–µ—Ç—å –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–π –ø–æ–ª–∑—É–Ω–æ–∫ "–û–¢–û–ë–†–ê–ñ–ê–¢–¨ –ù–ê –°–ê–ô–¢–ï"
      const finalProducts = processedProducts;

      // üìä –°–¢–ê–ù–î–ê–†–¢–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –û–¢–í–ï–¢
      const response = createListResponse(
        finalProducts, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        finalProducts.length,
        page,
        limit,
        'products',
        {
          search: search || null,
          category_filter: category || null,
          brand_filter: brand || null,
          total_images: Object.values(imagesByProductId).flat().length,
          unique_colors: Object.keys(colorNameByKey).length,
          fields_requested: fields || 'default'
        }
      );

      return res.status(200).json(response);

    } catch (error) {
      return handleGenericError(error, res, 'products API');
    }
  }

  // –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥
  const errorResponse = createErrorResponse('–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
  return res.status(405).json(errorResponse);
}

// üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
export default withPerformanceTracking(handler, '/api/products');