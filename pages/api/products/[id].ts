import { NextApiRequest, NextApiResponse } from 'next';
import { supabaseAdmin } from '../../../lib/supabaseAdmin';
import { cleanProductText } from '../../../lib/textCleaner';
import { canChangeProductColor } from '../../../lib/warehouseChecker';
import { normalizeColorName } from '../../../lib/colorNormalizer';
import { logUserActionDirect as logUserAction, getUserIdFromCookie } from '../../../lib/actionLogger';
import { withPermissions, RoleChecks } from '../../../lib/api/roleAuth';

async function handler(req: NextApiRequest, res: NextApiResponse) {
  const { id } = req.query;

  if (req.method === 'GET') {
    try {
      const { data: product, error } = await supabaseAdmin
        .from('products')
        .select(`
          *,
          brand:brands!products_brand_id_fkey (
            id,
            name
          ),
          category:categories!products_category_id_fkey (
            id,
            name
          )
        `)
        .eq('id', id)
        .single();

      if (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:', error);
        return res.status(404).json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–≤–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ, –µ—Å–ª–∏ –µ—Å—Ç—å color_id
      let colorData = null;
      if (product.color_id) {
        const { data: color } = await supabaseAdmin
          .from('colors')
          .select('id, name')
          .eq('id', product.color_id)
          .single();
        colorData = color ? {
          id: color.id,
          name: normalizeColorName(color.name)
        } : null;
      }

      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –º–∞—Å—Å–∏–≤—ã text[] –≤ —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ [" "] –¥–ª—è UI
      const normalize = (v: any) => {
        if (v === null || v === undefined) return '';
        if (Array.isArray(v)) {
          return v.join(' ').replace(/\["|"\]/g, '');
        }
        if (typeof v === 'string') {
          // –£–¥–∞–ª—è–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏ –∏ –∫–∞–≤—ã—á–∫–∏ –∏–∑ —Å—Ç—Ä–æ–∫
          let cleaned = v.replace(/\["|"\]/g, '').replace(/^\[|\]$/g, '');
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
          cleaned = cleaned.replace(/\\+"/g, '"');
          cleaned = cleaned.replace(/\\+/g, '\\');
          cleaned = cleaned.replace(/^["\\[\s]+/, '');
          cleaned = cleaned.replace(/["\\]\s]+$/, '');
          cleaned = cleaned.replace(/\|+/g, '');
          return cleaned.trim();
        }
        return v;
      };
      
      const normalized = {
        ...product,
        color: colorData,
        care_instructions: normalize((product as any).care_instructions),
        features: normalize((product as any).features),
        technical_specs: normalize((product as any).technical_specs),
        materials_info: normalize((product as any).materials_info),
        description: normalize((product as any).description),
      };

      // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
      const cleaned = cleanProductText(normalized);

      return res.status(200).json({ data: { product: cleaned } });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
      return res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  }

  if (req.method === 'PUT') {
    try {
      const {
        name,
        article,
        brand_id,
        category_id,
        color_id,
        composition,
        price,
        old_price,
        is_popular,
        is_visible,
        care_instructions
      } = req.body;

      // –°—Ç—Ä–æ–≥–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      const errors: string[] = [];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏ –Ω–µ –ø—É—Å—Ç—ã–µ
      if (!name || typeof name !== 'string' || !name.trim()) {
        errors.push('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
      }
      if (!brand_id || isNaN(parseInt(brand_id))) {
        errors.push('–ë—Ä–µ–Ω–¥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
      }
      if (!category_id || isNaN(parseInt(category_id))) {
        errors.push('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞');
      }
      if (!color_id || isNaN(parseInt(color_id))) {
        errors.push('–¶–≤–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
      }
      if (!article || typeof article !== 'string' || !article.trim()) {
        errors.push('–ê—Ä—Ç–∏–∫—É–ª –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
      }
      if (!price || isNaN(parseFloat(price)) || parseFloat(price) <= 0) {
        errors.push('–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
      }
      if (!composition || typeof composition !== 'string' || !composition.trim()) {
        errors.push('–°–æ—Å—Ç–∞–≤ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
      }
      // –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ - —É–±–∏—Ä–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∞—Ä—Ç–∏–∫—É–ª–∞
      if (article && article.trim()) {
        const latinOnly = /^[a-zA-Z0-9\s\-_]+$/;
        if (!latinOnly.test(article)) {
          errors.push('–ê—Ä—Ç–∏–∫—É–ª –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è');
        }
      }

      if (errors.length > 0) {
        return res.status(400).json({ 
          error: '–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
          details: errors
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞
      const currentProduct = await supabaseAdmin
        .from('products')
        .select('color_id')
        .eq('id', id)
        .single();

      if (currentProduct.data && currentProduct.data.color_id !== parseInt(color_id)) {
        const colorCheck = await canChangeProductColor(parseInt(id as string));
        
        if (!colorCheck.canChange) {
          return res.status(400).json({
            error: '–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞',
            details: [colorCheck.reason || '–¢–æ–≤–∞—Ä –∏–º–µ–µ—Ç —Å–∫–ª–∞–¥—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏'],
            stockInfo: colorCheck.stockInfo
          });
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –∞—Ä—Ç–∏–∫—É–ª–æ–º –∏ —Ü–≤–µ—Ç–æ–º (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–∏–π —Ç–æ–≤–∞—Ä)
      if (article && color_id) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ü–≤–µ—Ç–æ–º
        const result = await supabaseAdmin
          .from('products')
          .select('id, name, article, color_id')
          .eq('article', article)
          .eq('color_id', parseInt(color_id))
          .neq('id', id) // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–≤–∞—Ä
          .single();
        
        if (result.error && result.error.code !== 'PGRST116') { // PGRST116 = no rows returned
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞:', result.error);
          return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞' });
        }

        if (result.data) {
          return res.status(400).json({ 
            error: `–¢–æ–≤–∞—Ä —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º "${article}" –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ü–≤–µ—Ç–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ù–∞ –æ–¥–∏–Ω –∞—Ä—Ç–∏–∫—É–ª –∏ —Ü–≤–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞.`
          });
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
      const updateData = {
        name: name.trim(),
        article: article.trim(),
        brand_id: parseInt(brand_id),
        category_id: parseInt(category_id),
        color_id: parseInt(color_id),
        composition: composition.trim(),
        care_instructions: (care_instructions ?? '').toString().trim() || null,
        price: parseFloat(price),
        old_price: old_price ? parseFloat(old_price) : null,
        is_popular: is_popular || false,
        is_visible: is_visible !== undefined ? is_visible : true,
        updated_at: new Date().toISOString()
      };

      const { data: product, error } = await supabaseAdmin
        .from('products')
        .update(updateData)
        .eq('id', id)
        .select()
        .single();

      if (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:', error);
        const userId = getUserIdFromCookie(req);
        await logUserAction(userId, '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', 'error', `–û—à–∏–±–∫–∞: ${error.message}`);
        return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞' });
      }

      // üö´ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–ö–†–´–¢–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const { data: productImages, error: imagesError } = await supabaseAdmin
        .from('product_images')
        .select('id')
        .eq('product_id', id);

      if (!imagesError && (!productImages || productImages.length === 0)) {
        // –¢–æ–≤–∞—Ä –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - —Å–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
        await supabaseAdmin
          .from('products')
          .update({ 
            is_visible: false, 
            updated_at: new Date().toISOString() 
          })
          .eq('id', id);
        
        console.log(`üö´ –¢–æ–≤–∞—Ä ${id} (${article}) —Å–∫—Ä—ã—Ç - –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
      }

      // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      const userId = getUserIdFromCookie(req);
      await logUserAction(userId, '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', 'success', `–û–±–Ω–æ–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: ${name} (${article})`);

      return res.status(200).json(product);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
      return res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  }

  if (req.method === 'DELETE') {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞
      const { data: receiptItems } = await supabaseAdmin
        .from('receipt_items')
        .select('id, qty')
        .eq('product_id', id);
      
      const { data: realizationItems } = await supabaseAdmin
        .from('realization_items')
        .select('id, qty')
        .eq('product_id', id);

      // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∫–ª–∞–¥—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
      if (receiptItems && receiptItems.length > 0) {
        const totalStock = receiptItems.reduce((sum: number, item: any) => sum + (item.qty || 0), 0);
        return res.status(400).json({ 
          error: `–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä. –ù–∞ —Å–∫–ª–∞–¥–µ –æ—Å—Ç–∞–ª–æ—Å—å ${totalStock} —à—Ç. –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ —Å–∫–ª–∞–¥—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ –∏–ª–∏ —Å–∫—Ä–æ–π—Ç–µ —Ç–æ–≤–∞—Ä.`,
          stockCount: totalStock,
          hasStock: true
        });
      }

      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
      if (realizationItems && realizationItems.length > 0) {
        return res.status(400).json({ 
          error: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä. –ï—Å—Ç—å –∑–∞–ø–∏—Å–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏. –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ —Å–∫—Ä–æ–π—Ç–µ —Ç–æ–≤–∞—Ä.',
          hasRealizations: true
        });
      }

      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Storage
      const { data: productImages } = await supabaseAdmin
        .from('product_images')
        .select('image_url')
        .eq('product_id', id);

      // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –∏–∑ Storage
      if (productImages && productImages.length > 0) {
        const filesToDelete = productImages.map((img: any) => {
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ URL
          const url = new URL(img.image_url);
          const pathParts = url.pathname.split('/');
          const filePath = pathParts.slice(-2).join('/'); // products/filename.jpg
          return filePath;
        });

        console.log('–£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –∏–∑ Storage:', filesToDelete);

        // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –∏–∑ Storage
        const { error: storageError } = await supabaseAdmin.storage
          .from('images')
          .remove(filesToDelete);

        if (storageError) {
          console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏–∑ Storage:', storageError);
        } else {
          console.log(`–£–¥–∞–ª–µ–Ω–æ ${filesToDelete.length} —Ñ–∞–π–ª–æ–≤ –∏–∑ Storage`);
        }
      }

      // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –ë–î
      await supabaseAdmin
        .from('product_images')
        .delete()
        .eq('product_id', id);

      // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–∞–º —Ç–æ–≤–∞—Ä
      const { error } = await supabaseAdmin
        .from('products')
        .delete()
        .eq('id', id);

      if (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:', error);
        const userId = getUserIdFromCookie(req);
        await logUserAction(userId, '–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', 'error', `–û—à–∏–±–∫–∞: ${error.message}`);
        return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞' });
      }

      // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
      const userId = getUserIdFromCookie(req);
      await logUserAction(userId, '–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', 'success', `–£–¥–∞–ª–µ–Ω —Ç–æ–≤–∞—Ä —Å ID: ${id}`);

      return res.status(200).json({ message: '–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω' });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
      return res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  }

  return res.status(405).json({ error: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' });
}

// –†–∞–∑—Ä–µ—à–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ –∞–¥–º–∏–Ω–∞–º, –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –∏ –∫–ª–∞–¥–æ–≤—â–∏–∫–∞–º
export default withPermissions(
  RoleChecks.canManageProducts,
  '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏'
)(handler);