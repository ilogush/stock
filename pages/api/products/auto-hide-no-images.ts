import { NextApiRequest, NextApiResponse } from 'next';
import { supabaseAdmin } from '../../../lib/supabaseAdmin';
import { withAuth } from '../../../lib/middleware';

async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' });
  }

  try {
    console.log('üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∏–¥–∏–º—ã–µ —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const { data: productsWithoutImages, error: fetchError } = await supabaseAdmin
      .from('products')
      .select(`
        id,
        name,
        article,
        is_visible,
        product_images(id)
      `)
      .eq('is_visible', true);

    if (fetchError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤:', fetchError);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤' });
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const productsToHide = productsWithoutImages.filter(product => 
      !product.product_images || product.product_images.length === 0
    );

    if (productsToHide.length === 0) {
      console.log('‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏–ª–∏ —É–∂–µ —Å–∫—Ä—ã—Ç—ã');
      return res.status(200).json({ 
        success: true, 
        message: '–í—Å–µ —Ç–æ–≤–∞—Ä—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏–ª–∏ —É–∂–µ —Å–∫—Ä—ã—Ç—ã',
        hidden_count: 0 
      });
    }

    console.log(`üö´ –ù–∞–π–¥–µ–Ω–æ ${productsToHide.length} —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è`);

    // –°–∫—Ä—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const productIdsToHide = productsToHide.map(p => p.id);
    
    const { error: updateError } = await supabaseAdmin
      .from('products')
      .update({ 
        is_visible: false, 
        updated_at: new Date().toISOString() 
      })
      .in('id', productIdsToHide);

    if (updateError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤:', updateError);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤' });
    }

    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫—Ä—ã—Ç–æ ${productIdsToHide.length} —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);

    return res.status(200).json({ 
      success: true, 
      message: `–°–∫—Ä—ã—Ç–æ ${productIdsToHide.length} —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`,
      hidden_count: productIdsToHide.length,
      hidden_products: productsToHide.slice(0, 10).map(p => ({
        id: p.id,
        article: p.article,
        name: p.name
      }))
    });

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    return res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
}

export default withAuth(handler);
