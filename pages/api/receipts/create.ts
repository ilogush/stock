import { NextApiRequest, NextApiResponse } from 'next';
import { supabaseAdmin } from '../../../lib/supabaseAdmin';
import { logUserActionDirect as logUserAction, getUserIdFromCookie } from '../../../lib/actionLogger';
import { withPermissions, RoleChecks, AuthenticatedRequest, logAccess } from '../../../lib/api/roleAuth';
import { createItemResponse, createErrorResponse } from '../../../lib/api/standardResponse';
import { handleDatabaseError, handleGenericError } from '../../../lib/api/errorHandling';

export default withPermissions(
  RoleChecks.canCreateReceipts,
  '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∫–ª–∞–¥–æ–≤—â–∏–∫–∞–º'
)(async function handler(req: AuthenticatedRequest, res: NextApiResponse) {
  if (req.method !== 'POST') {
    const errorResponse = createErrorResponse('–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
    return res.status(405).json(errorResponse);
  }

  try {
    // üîí –õ–æ–≥–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
    logAccess(req, 'CREATE_RECEIPT');
    const { transferrer_id, notes, items, created_by } = req.body;
    if (!items || !Array.isArray(items) || items.length === 0) {
      return res.status(400).json({ error: '–ü–æ–∑–∏—Ü–∏–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    if (!transferrer_id) {
      return res.status(400).json({ error: '–ü–æ–ª–µ "–ü—Ä–∏–Ω—è—Ç–æ –æ—Ç" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
    }

    // –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ
    const { data: receipt, error: receiptError } = await supabaseAdmin
      .from('receipts')
      .insert({
        transferrer_id: transferrer_id || null,
        creator_id: created_by || null,
        notes: notes || '', // –µ—Å–ª–∏ –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–æ–ª—è ‚Äî —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É
      })
      .select()
      .single();

    if (receiptError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:', receiptError);
      const userId = getUserIdFromCookie(req);
      await logUserAction(userId, '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è', 'error', `–û—à–∏–±–∫–∞: ${receiptError.message}`);
      return res.status(500).json({ error: receiptError.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è' });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
    for (const item of items) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
      const { data: product } = await supabaseAdmin
        .from('products')
        .select('id, name, category_id, color_id')
        .eq('id', item.product_id)
        .single();

      if (!product) {
        return res.status(400).json({ 
          error: `–¢–æ–≤–∞—Ä —Å ID ${item.product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω` 
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–≤–µ—Ç: –µ—Å–ª–∏ color_id –ø–µ—Ä–µ–¥–∞–Ω, –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º —á–∏—Å–ª–æ–º
      if (item.color_id !== null && item.color_id !== undefined && item.color_id !== 0) {
        const colorId = parseInt(item.color_id);
        if (isNaN(colorId) || colorId <= 0) {
          return res.status(400).json({ 
            error: `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ü–≤–µ—Ç–∞: ${item.color_id}` 
          });
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç—Å–∫–∏–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –¥–µ—Ç—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
      if (product.category_id === 3) { // –î–µ—Ç—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        const childrenSizes = ['92', '98', '104', '110', '116', '122'];
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤—É—é —á–∞—Å—Ç—å –∏–∑ —Ä–∞–∑–º–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "98 - 3 –≥–æ–¥–∞" -> "98")
        const sizeNumber = item.size_code.split(' ')[0];
        if (!childrenSizes.includes(sizeNumber)) {
          return res.status(400).json({ 
            error: `–î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —Ä–∞–∑–º–µ—Ä—ã –æ—Ç 92 –¥–æ 122, –ø–æ–ª—É—á–µ–Ω: ${item.size_code}` 
          });
        }
      }
    }

    // –°–æ–∑–¥–∞—ë–º –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è!)
    const receiptItems = items.map((item: any) => ({
      product_id: item.product_id,
      qty: item.quantity || item.qty || 0,
      size_code: item.size_code.split(' ')[0], // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—É—é —á–∞—Å—Ç—å —Ä–∞–∑–º–µ—Ä–∞
      color_id: item.color_id || null
    }));

    const { error: itemsError } = await supabaseAdmin
      .from('receipt_items')
      .insert(receiptItems);

    if (itemsError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:', itemsError);
      const userId = getUserIdFromCookie(req);
      await logUserAction(userId, '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è', 'error', `–û—à–∏–±–∫–∞ –ø–æ–∑–∏—Ü–∏–π: ${itemsError.message}`);
      await supabaseAdmin.from('receipts').delete().eq('id', receipt.id);
      return res.status(500).json({ error: itemsError.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è' });
    }

    // –û—Å—Ç–∞—Ç–∫–∏ —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –Ω–∞ –ª–µ—Ç—É –∏–∑ receipt_items - realization_items
    // –ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É stock

    // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
    const userId = req.user!.id;
    await logUserAction(userId, '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è', 'success', `ID:${receipt.id} —Å ${items.length} –ø–æ–∑–∏—Ü–∏—è–º–∏`);

    // üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    const response = createItemResponse(receipt, 'receipt', {
      created_by: req.user!.id,
      user_role: req.user!.role_id,
      items_count: items.length
    });

    return res.status(201).json(response);
  } catch (error: any) {
    return handleGenericError(error, res, 'receipt creation');
  }
});
