require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */

const supabaseAdmin = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

console.log('üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∑–∞–ø—Ä–æ—Å–∞
async function executeQuery(query, description) {
  try {
    console.log(`üìä ${description}...`);
    const start = Date.now();
    
    const { data, error } = await supabaseAdmin.rpc('exec_sql', { sql: query });
    
    const duration = Date.now() - start;
    
    if (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
      return null;
    }
    
    console.log(`‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ ${duration}ms`);
    return { data, duration };
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${error.message}`);
    return null;
  }
}

// –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ç–∞–±–ª–∏—Ü
async function analyzeTableSizes() {
  console.log('\n1Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ç–∞–±–ª–∏—Ü:');
  console.log('============================');
  
  const query = `
    SELECT 
      schemaname,
      tablename,
      pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) as size,
      pg_total_relation_size(schemaname||'.'||tablename) as size_bytes
    FROM pg_tables 
    WHERE schemaname = 'public'
    ORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC;
  `;
  
  const result = await executeQuery(query, '–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ç–∞–±–ª–∏—Ü');
  if (result && result.data) {
    result.data.forEach(row => {
      console.log(`   ${row.tablename}: ${row.size}`);
    });
  }
}

// –ê–Ω–∞–ª–∏–∑ –∏–Ω–¥–µ–∫—Å–æ–≤
async function analyzeIndexes() {
  console.log('\n2Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –∏–Ω–¥–µ–∫—Å–æ–≤:');
  console.log('====================');
  
  const query = `
    SELECT 
      t.tablename,
      i.indexname,
      pg_size_pretty(pg_relation_size(i.indexname::regclass)) as size,
      i.indexdef
    FROM pg_indexes i
    JOIN pg_tables t ON i.tablename = t.tablename
    WHERE t.schemaname = 'public'
    ORDER BY pg_relation_size(i.indexname::regclass) DESC;
  `;
  
  const result = await executeQuery(query, '–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω–¥–µ–∫—Å–∞—Ö');
  if (result && result.data) {
    result.data.forEach(row => {
      console.log(`   ${row.tablename}.${row.indexname}: ${row.size}`);
    });
  }
}

// –ê–Ω–∞–ª–∏–∑ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
async function analyzeSlowQueries() {
  console.log('\n3Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:');
  console.log('==============================');
  
  const query = `
    SELECT 
      query,
      calls,
      total_time,
      mean_time,
      rows
    FROM pg_stat_statements 
    WHERE mean_time > 100
    ORDER BY mean_time DESC
    LIMIT 10;
  `;
  
  const result = await executeQuery(query, '–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤');
  if (result && result.data) {
    result.data.forEach((row, index) => {
      console.log(`   ${index + 1}. ${row.query.substring(0, 100)}...`);
      console.log(`      –í—ã–∑–æ–≤–æ–≤: ${row.calls}, –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${row.mean_time.toFixed(2)}ms`);
    });
  } else {
    console.log('   ‚ö†Ô∏è pg_stat_statements –Ω–µ –≤–∫–ª—é—á–µ–Ω –∏–ª–∏ –Ω–µ—Ç –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤');
  }
}

// –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤
async function analyzeIndexUsage() {
  console.log('\n4Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤:');
  console.log('==================================');
  
  const query = `
    SELECT 
      schemaname,
      tablename,
      indexname,
      idx_tup_read,
      idx_tup_fetch
    FROM pg_stat_user_indexes
    WHERE schemaname = 'public'
    ORDER BY idx_tup_read DESC
    LIMIT 10;
  `;
  
  const result = await executeQuery(query, '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤');
  if (result && result.data) {
    result.data.forEach(row => {
      console.log(`   ${row.tablename}.${row.indexname}: ${row.idx_tup_read} —á—Ç–µ–Ω–∏–π`);
    });
  }
}

// –ê–Ω–∞–ª–∏–∑ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
async function analyzeLocks() {
  console.log('\n5Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫:');
  console.log('======================');
  
  const query = `
    SELECT 
      blocked_locks.pid AS blocked_pid,
      blocked_activity.usename AS blocked_user,
      blocking_locks.pid AS blocking_pid,
      blocking_activity.usename AS blocking_user,
      blocked_activity.query AS blocked_statement,
      blocking_activity.query AS current_statement_in_blocking_process
    FROM pg_catalog.pg_locks blocked_locks
    JOIN pg_catalog.pg_stat_activity blocked_activity ON blocked_activity.pid = blocked_locks.pid
    JOIN pg_catalog.pg_locks blocking_locks ON blocking_locks.locktype = blocked_locks.locktype
      AND blocking_locks.database IS NOT DISTINCT FROM blocked_locks.database
      AND blocking_locks.relation IS NOT DISTINCT FROM blocked_locks.relation
      AND blocking_locks.page IS NOT DISTINCT FROM blocked_locks.page
      AND blocking_locks.tuple IS NOT DISTINCT FROM blocked_locks.tuple
      AND blocking_locks.virtualxid IS NOT DISTINCT FROM blocked_locks.virtualxid
      AND blocking_locks.transactionid IS NOT DISTINCT FROM blocked_locks.transactionid
      AND blocking_locks.classid IS NOT DISTINCT FROM blocked_locks.classid
      AND blocking_locks.objid IS NOT DISTINCT FROM blocked_locks.objid
      AND blocking_locks.objsubid IS NOT DISTINCT FROM blocked_locks.objsubid
      AND blocking_locks.pid != blocked_locks.pid
    JOIN pg_catalog.pg_stat_activity blocking_activity ON blocking_activity.pid = blocking_locks.pid
    WHERE NOT blocked_locks.granted;
  `;
  
  const result = await executeQuery(query, '–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫');
  if (result && result.data && result.data.length > 0) {
    console.log('   ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:');
    result.data.forEach(row => {
      console.log(`      –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π PID: ${row.blocked_pid}`);
      console.log(`      –ë–ª–æ–∫–∏—Ä—É—é—â–∏–π PID: ${row.blocking_pid}`);
    });
  } else {
    console.log('   ‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
  }
}

// –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–∞–±–ª–∏—Ü
async function analyzeTableStats() {
  console.log('\n6Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–∞–±–ª–∏—Ü:');
  console.log('==============================');
  
  const query = `
    SELECT 
      schemaname,
      tablename,
      n_tup_ins as inserts,
      n_tup_upd as updates,
      n_tup_del as deletes,
      n_live_tup as live_tuples,
      n_dead_tup as dead_tuples,
      last_vacuum,
      last_autovacuum,
      last_analyze,
      last_autoanalyze
    FROM pg_stat_user_tables
    WHERE schemaname = 'public'
    ORDER BY n_live_tup DESC;
  `;
  
  const result = await executeQuery(query, '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–∞–±–ª–∏—Ü');
  if (result && result.data) {
    result.data.forEach(row => {
      console.log(`   ${row.tablename}:`);
      console.log(`      –ó–∞–ø–∏—Å–µ–π: ${row.live_tuples}, –í—Å—Ç–∞–≤–æ–∫: ${row.inserts}, –û–±–Ω–æ–≤–ª–µ–Ω–∏–π: ${row.updates}`);
      console.log(`      –ú–µ—Ä—Ç–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π: ${row.dead_tuples}`);
      if (row.last_analyze) {
        console.log(`      –ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑: ${new Date(row.last_analyze).toLocaleString()}`);
      }
    });
  }
}

// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
async function generateRecommendations() {
  console.log('\n7Ô∏è‚É£ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:');
  console.log('==================================');
  
  const recommendations = [];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–∞–±–ª–∏—Ü
  const sizeQuery = `
    SELECT 
      tablename,
      pg_total_relation_size('public.'||tablename) as size_bytes
    FROM pg_tables 
    WHERE schemaname = 'public'
    ORDER BY pg_total_relation_size('public.'||tablename) DESC;
  `;
  
  const sizeResult = await executeQuery(sizeQuery, '–ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π');
  if (sizeResult && sizeResult.data) {
    const largeTables = sizeResult.data.filter(row => row.size_bytes > 100 * 1024 * 1024); // > 100MB
    if (largeTables.length > 0) {
      recommendations.push(`üìä –ë–æ–ª—å—à–∏–µ —Ç–∞–±–ª–∏—Ü—ã (>100MB): ${largeTables.map(t => t.tablename).join(', ')}`);
      recommendations.push('   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ä—Ç–≤—ã–µ –∑–∞–ø–∏—Å–∏
  const deadQuery = `
    SELECT 
      tablename,
      n_dead_tup,
      n_live_tup
    FROM pg_stat_user_tables
    WHERE schemaname = 'public' AND n_dead_tup > n_live_tup * 0.1;
  `;
  
  const deadResult = await executeQuery(deadQuery, '–ê–Ω–∞–ª–∏–∑ –º–µ—Ä—Ç–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π');
  if (deadResult && deadResult.data && deadResult.data.length > 0) {
    recommendations.push('üßπ –¢–∞–±–ª–∏—Ü—ã —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –º–µ—Ä—Ç–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π:');
    deadResult.data.forEach(row => {
      recommendations.push(`   ${row.tablename}: ${row.n_dead_tup} –º–µ—Ä—Ç–≤—ã—Ö –∏–∑ ${row.n_live_tup} –æ–±—â–∏—Ö`);
    });
    recommendations.push('   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –í—ã–ø–æ–ª–Ω–∏—Ç–µ VACUUM –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –º–µ—Ä—Ç–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
  const noIndexQuery = `
    SELECT 
      t.tablename,
      COUNT(i.indexname) as index_count
    FROM pg_tables t
    LEFT JOIN pg_indexes i ON t.tablename = i.tablename AND t.schemaname = i.schemaname
    WHERE t.schemaname = 'public'
    GROUP BY t.tablename
    HAVING COUNT(i.indexname) = 0;
  `;
  
  const noIndexResult = await executeQuery(noIndexQuery, '–ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü –±–µ–∑ –∏–Ω–¥–µ–∫—Å–æ–≤');
  if (noIndexResult && noIndexResult.data && noIndexResult.data.length > 0) {
    recommendations.push('üìá –¢–∞–±–ª–∏—Ü—ã –±–µ–∑ –∏–Ω–¥–µ–∫—Å–æ–≤:');
    noIndexResult.data.forEach(row => {
      recommendations.push(`   ${row.tablename}`);
    });
    recommendations.push('   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –î–æ–±–∞–≤—å—Ç–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–æ–ª–µ–π');
  }
  
  // –í—ã–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  if (recommendations.length > 0) {
    recommendations.forEach(rec => console.log(`   ${rec}`));
  } else {
    console.log('   ‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    await analyzeTableSizes();
    await analyzeIndexes();
    await analyzeSlowQueries();
    await analyzeIndexUsage();
    await analyzeLocks();
    await analyzeTableStats();
    await generateRecommendations();
    
    console.log('\nüéâ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    console.log('\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('   1. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –∏–Ω–¥–µ–∫—Å—ã –∏–∑ sql/optimization-indexes.sql');
    console.log('   2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ VACUUM –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –º–µ—Ä—Ç–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π');
    console.log('   3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
    console.log('   4. –†–µ–≥—É–ª—è—Ä–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error.message);
  }
}

main();
