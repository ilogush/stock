const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ Next.js...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
function removeDirectory(dirPath) {
  if (fs.existsSync(dirPath)) {
    try {
      fs.rmSync(dirPath, { recursive: true, force: true });
      console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–∞: ${dirPath}`);
    } catch (error) {
      console.log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: ${dirPath} - ${error.message}`);
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
function removeFile(filePath) {
  if (fs.existsSync(filePath)) {
    try {
      fs.unlinkSync(filePath);
      console.log(`‚úÖ –£–¥–∞–ª–µ–Ω: ${filePath}`);
    } catch (error) {
      console.log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: ${filePath} - ${error.message}`);
    }
  }
}

// –û—á–∏—â–∞–µ–º –∫–µ—à Next.js
removeDirectory('.next');
removeDirectory('out');

// –û—á–∏—â–∞–µ–º –∫–µ—à npm
try {
  console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ npm...');
  execSync('npm cache clean --force', { stdio: 'inherit' });
  console.log('‚úÖ –ö–µ—à npm –æ—á–∏—â–µ–Ω');
} catch (error) {
  console.log('‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞ npm:', error.message);
}

// –û—á–∏—â–∞–µ–º node_modules (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
const shouldRemoveNodeModules = process.argv.includes('--remove-node-modules');
if (shouldRemoveNodeModules) {
  console.log('üßπ –£–¥–∞–ª–µ–Ω–∏–µ node_modules...');
  removeDirectory('node_modules');
  console.log('üì¶ –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
  try {
    execSync('npm install', { stdio: 'inherit' });
    console.log('‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:', error.message);
  }
}

console.log('\nüéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
console.log('üí° –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ: npm run dev');
