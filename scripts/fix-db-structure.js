require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

async function fixDatabaseStructure() {
  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY
  );

  console.log('üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•\n');

  try {
    // 1. –î–æ–±–∞–≤–ª—è–µ–º receipt_id –≤ receipt_items
    console.log('1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ receipt_id –≤ receipt_items...');
    
    // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É
    const { error: addReceiptIdError } = await supabase.rpc('exec_sql', {
      sql: 'ALTER TABLE receipt_items ADD COLUMN IF NOT EXISTS receipt_id INTEGER;'
    });
    
    if (addReceiptIdError) {
      console.log('   –ö–æ–ª–æ–Ω–∫–∞ receipt_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞:', addReceiptIdError.message);
    } else {
      console.log('   ‚úÖ –ö–æ–ª–æ–Ω–∫–∞ receipt_id –¥–æ–±–∞–≤–ª–µ–Ω–∞');
    }

    // –ó–∞–ø–æ–ª–Ω—è–µ–º receipt_id –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–≤—è–∑–∏
    console.log('   –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ receipt_id –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–≤—è–∑–∏...');
    const { error: updateReceiptIdError } = await supabase.rpc('exec_sql', {
      sql: `
        UPDATE receipt_items 
        SET receipt_id = (
          SELECT r.id 
          FROM receipts r 
          WHERE ABS(EXTRACT(EPOCH FROM (r.created_at - receipt_items.created_at))) < 60
          ORDER BY ABS(EXTRACT(EPOCH FROM (r.created_at - receipt_items.created_at)))
          LIMIT 1
        )
        WHERE receipt_id IS NULL;
      `
    });
    
    if (updateReceiptIdError) {
      console.log('   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è receipt_id:', updateReceiptIdError.message);
    } else {
      console.log('   ‚úÖ receipt_id –∑–∞–ø–æ–ª–Ω–µ–Ω');
    }

    // 2. –î–æ–±–∞–≤–ª—è–µ–º realization_id –≤ realization_items
    console.log('\n2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ realization_id –≤ realization_items...');
    
    const { error: addRealizationIdError } = await supabase.rpc('exec_sql', {
      sql: 'ALTER TABLE realization_items ADD COLUMN IF NOT EXISTS realization_id INTEGER;'
    });
    
    if (addRealizationIdError) {
      console.log('   –ö–æ–ª–æ–Ω–∫–∞ realization_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞:', addRealizationIdError.message);
    } else {
      console.log('   ‚úÖ –ö–æ–ª–æ–Ω–∫–∞ realization_id –¥–æ–±–∞–≤–ª–µ–Ω–∞');
    }

    // –ó–∞–ø–æ–ª–Ω—è–µ–º realization_id
    console.log('   –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ realization_id –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–≤—è–∑–∏...');
    const { error: updateRealizationIdError } = await supabase.rpc('exec_sql', {
      sql: `
        UPDATE realization_items 
        SET realization_id = (
          SELECT r.id 
          FROM realization r 
          WHERE ABS(EXTRACT(EPOCH FROM (r.created_at - realization_items.created_at))) < 60
          ORDER BY ABS(EXTRACT(EPOCH FROM (r.created_at - realization_items.created_at)))
          LIMIT 1
        )
        WHERE realization_id IS NULL;
      `
    });
    
    if (updateRealizationIdError) {
      console.log('   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è realization_id:', updateRealizationIdError.message);
    } else {
      console.log('   ‚úÖ realization_id –∑–∞–ø–æ–ª–Ω–µ–Ω');
    }

    // 3. –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
    console.log('\n3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤...');
    
    const indexes = [
      'CREATE INDEX IF NOT EXISTS idx_receipt_items_receipt_id ON receipt_items(receipt_id);',
      'CREATE INDEX IF NOT EXISTS idx_receipt_items_product_id ON receipt_items(product_id);',
      'CREATE INDEX IF NOT EXISTS idx_receipt_items_created_at ON receipt_items(created_at);',
      'CREATE INDEX IF NOT EXISTS idx_receipt_items_size_code ON receipt_items(size_code);',
      'CREATE INDEX IF NOT EXISTS idx_realization_items_realization_id ON realization_items(realization_id);',
      'CREATE INDEX IF NOT EXISTS idx_realization_items_product_id ON realization_items(product_id);',
      'CREATE INDEX IF NOT EXISTS idx_realization_items_created_at ON realization_items(created_at);',
      'CREATE INDEX IF NOT EXISTS idx_realization_items_size_code ON realization_items(size_code);',
      'CREATE INDEX IF NOT EXISTS idx_products_article ON products(article);',
      'CREATE INDEX IF NOT EXISTS idx_products_name ON products(name);',
      'CREATE INDEX IF NOT EXISTS idx_products_brand_id ON products(brand_id);',
      'CREATE INDEX IF NOT EXISTS idx_products_category_id ON products(category_id);'
    ];

    for (const indexSql of indexes) {
      const { error: indexError } = await supabase.rpc('exec_sql', { sql: indexSql });
      if (indexError) {
        console.log('   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞:', indexError.message);
      } else {
        console.log('   ‚úÖ –ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω');
      }
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º receipt_items
    const { data: receiptItemsCheck, error: receiptCheckError } = await supabase
      .from('receipt_items')
      .select('id, receipt_id, created_at')
      .not('receipt_id', 'is', null)
      .limit(5);
    
    if (!receiptCheckError && receiptItemsCheck) {
      console.log('   ‚úÖ receipt_items —Å receipt_id:', receiptItemsCheck.length, '–∑–∞–ø–∏—Å–µ–π');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º realization_items
    const { data: realizationItemsCheck, error: realizationCheckError } = await supabase
      .from('realization_items')
      .select('id, realization_id, created_at')
      .not('realization_id', 'is', null)
      .limit(5);
    
    if (!realizationCheckError && realizationItemsCheck) {
      console.log('   ‚úÖ realization_items —Å realization_id:', realizationItemsCheck.length, '–∑–∞–ø–∏—Å–µ–π');
    }

    console.log('\nüéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù–´!');
    console.log('\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
    console.log('1. –û–±–Ω–æ–≤–∏—Ç—å API endpoints –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π');
    console.log('2. –î–æ–±–∞–≤–∏—Ç—å foreign key constraints');
    console.log('3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

fixDatabaseStructure().catch(console.error);
