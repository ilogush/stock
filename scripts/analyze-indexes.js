/**
 * üìä –ê–Ω–∞–ª–∏–∑ –∏–Ω–¥–µ–∫—Å–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 */

require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

const RECOMMENDED_INDEXES = [
  // üîç –ü–æ–∏—Å–∫–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã
  {
    table: 'products',
    columns: ['article'],
    type: 'btree',
    reason: '–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É —Ç–æ–≤–∞—Ä–∞'
  },
  {
    table: 'products', 
    columns: ['name'],
    type: 'btree',
    reason: '–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞'
  },
  {
    table: 'products',
    columns: ['category_id', 'brand_id'],
    type: 'btree',
    reason: '–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –±—Ä–µ–Ω–¥—É'
  },
  
  // üì¶ –°–∫–ª–∞–¥—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
  {
    table: 'receipt_items',
    columns: ['product_id', 'created_at'],
    type: 'btree', 
    reason: '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ'
  },
  {
    table: 'realization_items',
    columns: ['product_id', 'created_at'],
    type: 'btree',
    reason: '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤'
  },
  {
    table: 'receipt_items',
    columns: ['article', 'created_at'],
    type: 'btree',
    reason: '–°–≤—è–∑—å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏ –≤—Ä–µ–º–µ–Ω–∏'
  },
  {
    table: 'realization_items',
    columns: ['article', 'created_at'],
    type: 'btree',
    reason: '–°–≤—è–∑—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏ –≤—Ä–µ–º–µ–Ω–∏'
  },

  // üìÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
  {
    table: 'receipts',
    columns: ['created_at'],
    type: 'btree',
    reason: '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π –ø–æ –¥–∞—Ç–µ'
  },
  {
    table: 'realization',
    columns: ['created_at'],
    type: 'btree', 
    reason: '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π –ø–æ –¥–∞—Ç–µ'
  },

  // üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
  {
    table: 'users',
    columns: ['role_id'],
    type: 'btree',
    reason: '–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª–∏'
  },
  {
    table: 'tasks',
    columns: ['assignee_id', 'status'],
    type: 'btree',
    reason: '–ü–æ–∏—Å–∫ –∑–∞–¥–∞—á –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –∏ —Å—Ç–∞—Ç—É—Å—É'
  },

  // üîó –í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
  {
    table: 'products',
    columns: ['color_id'],
    type: 'btree',
    reason: 'JOIN —Å —Ç–∞–±–ª–∏—Ü–µ–π —Ü–≤–µ—Ç–æ–≤'
  },
  {
    table: 'brand_managers',
    columns: ['brand_id', 'user_id'],
    type: 'btree',
    reason: '–°–≤—è–∑—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —Å –±—Ä–µ–Ω–¥–∞–º–∏'
  }
];

async function analyzeCurrentIndexes() {
  console.log('üîç –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–∏—Ö –∏–Ω–¥–µ–∫—Å–æ–≤...\n');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–Ω–¥–µ–∫—Å–∞—Ö
    const { data: indexes, error } = await supabase
      .rpc('get_table_indexes', {});
    
    if (error) {
      console.log('‚ÑπÔ∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–¥–µ–∫—Å–∞—Ö —á–µ—Ä–µ–∑ RPC');
      console.log('   –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è Supabase - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏\n');
    }

    return indexes || [];
  } catch (error) {
    console.log('‚ÑπÔ∏è  –ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n');
    return [];
  }
}

async function generateIndexRecommendations() {
  console.log('üìä –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–ù–î–ï–ö–°–ê–ú\n');
  console.log('=' .repeat(50));
  
  const existingIndexes = await analyzeCurrentIndexes();
  
  RECOMMENDED_INDEXES.forEach((index, i) => {
    console.log(`\n${i + 1}. –¢–∞–±–ª–∏—Ü–∞: ${index.table}`);
    console.log(`   –ö–æ–ª–æ–Ω–∫–∏: ${index.columns.join(', ')}`);
    console.log(`   –¢–∏–ø: ${index.type.toUpperCase()}`);
    console.log(`   üí° –ü—Ä–∏—á–∏–Ω–∞: ${index.reason}`);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞
    const indexName = `idx_${index.table}_${index.columns.join('_')}`;
    const sql = `CREATE INDEX ${indexName} ON ${index.table} (${index.columns.join(', ')});`;
    console.log(`   üîß SQL: ${sql}`);
  });

  console.log('\n' + '=' .repeat(50));
  console.log('üìã –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –î–û–ë–ê–í–õ–ï–ù–ò–Æ –ò–ù–î–ï–ö–°–û–í:');
  console.log('\n1. –û—Ç–∫—Ä–æ–π—Ç–µ Supabase Dashboard');
  console.log('2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ SQL Editor');
  console.log('3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL –∫–æ–º–∞–Ω–¥—ã –≤—ã—à–µ –ø–æ –æ–¥–Ω–æ–π');
  console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞');
  console.log('\n‚ö†Ô∏è  –í–ê–ñ–ù–û: –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏–Ω–¥–µ–∫—Å—ã –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –∏ —Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!');
}

async function testTableQueries() {
  console.log('\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ó–ê–ü–†–û–°–û–í\n');
  console.log('=' .repeat(50));

  const testQueries = [
    {
      name: '–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É',
      query: () => supabase.from('products').select('id, article, name').ilike('article', '%W%').limit(10)
    },
    {
      name: '–¢–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –±—Ä–µ–Ω–¥—É', 
      query: () => supabase.from('products').select('id, name').eq('category_id', 1).eq('brand_id', 1).limit(10)
    },
    {
      name: '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è',
      query: () => supabase.from('receipts').select('id, created_at').order('created_at', { ascending: false }).limit(10)
    },
    {
      name: '–ó–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      query: () => supabase.from('tasks').select('id, title, status').eq('assignee_id', 1).limit(10)
    }
  ];

  for (const test of testQueries) {
    const startTime = Date.now();
    try {
      const { data, error } = await test.query();
      const duration = Date.now() - startTime;
      
      if (error) {
        console.log(`‚ùå ${test.name}: –û–®–ò–ë–ö–ê - ${error.message}`);
      } else {
        console.log(`‚úÖ ${test.name}: ${duration}ms (–Ω–∞–π–¥–µ–Ω–æ ${data?.length || 0} –∑–∞–ø–∏—Å–µ–π)`);
      }
    } catch (err) {
      console.log(`‚ùå ${test.name}: –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï - ${err.message}`);
    }
  }
}

async function main() {
  console.log('üöÄ –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ë–î\n');
  
  await generateIndexRecommendations();
  await testTableQueries();
  
  console.log('\n‚ú® –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!');
  console.log('üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–µ–Ω: /api/admin/performance-stats');
}

main().catch(console.error);
