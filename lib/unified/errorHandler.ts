import { NextApiResponse } from 'next';

/**
 * –ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
 */

export interface ApiError {
  message: string;
  code?: string;
  status: number;
  details?: any;
  context?: string;
  timestamp: string;
}

export interface ValidationError {
  field: string;
  message: string;
  value?: any;
}

export interface ErrorResponse {
  error: string;
  code?: string;
  details?: any;
  context?: string;
  timestamp: string;
  validationErrors?: ValidationError[];
}

/**
 * –¢–∏–ø—ã –æ—à–∏–±–æ–∫
 */
export const ERROR_TYPES = {
  VALIDATION_ERROR: { code: 'VALIDATION_ERROR', status: 400 },
  AUTHENTICATION_ERROR: { code: 'AUTH_ERROR', status: 401 },
  AUTHORIZATION_ERROR: { code: 'AUTHZ_ERROR', status: 403 },
  NOT_FOUND: { code: 'NOT_FOUND', status: 404 },
  CONFLICT: { code: 'CONFLICT', status: 409 },
  DATABASE_ERROR: { code: 'DB_ERROR', status: 500 },
  EXTERNAL_SERVICE_ERROR: { code: 'EXTERNAL_ERROR', status: 502 },
  INTERNAL_ERROR: { code: 'INTERNAL_ERROR', status: 500 },
  RATE_LIMIT_ERROR: { code: 'RATE_LIMIT', status: 429 }
} as const;

/**
 * –°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ—à–∏–±–∫—É API
 */
export function createApiError(
  type: keyof typeof ERROR_TYPES,
  message: string,
  details?: any,
  context?: string
): ApiError {
  const errorType = ERROR_TYPES[type];
  
  return {
    message,
    code: errorType.code,
    status: errorType.status,
    details,
    context,
    timestamp: new Date().toISOString()
  };
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase
 */
export function handleDatabaseError(error: any, context?: string): ApiError {
  console.error('Database error:', error, context);

  if (error.code) {
    switch (error.code) {
      case 'PGRST116': // No rows returned
        return createApiError('NOT_FOUND', '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', error, context);
      
      case '23505': // Unique constraint violation
        return createApiError('CONFLICT', '–ó–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', error, context);
      
      case '23503': // Foreign key constraint violation
        return createApiError('VALIDATION_ERROR', '–ù–∞—Ä—É—à–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏', error, context);
      
      case '23502': // Not null constraint violation
        return createApiError('VALIDATION_ERROR', '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ', error, context);
      
      case 'PGRST204': // Column not found
        return createApiError('DATABASE_ERROR', '–û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', error, context);
      
      case 'PGRST200': // Relationship not found
        return createApiError('DATABASE_ERROR', '–û—à–∏–±–∫–∞ —Å–≤—è–∑–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', error, context);
      
      case 'PGRST100': // SQL syntax error
        return createApiError('DATABASE_ERROR', '–û—à–∏–±–∫–∞ SQL –∑–∞–ø—Ä–æ—Å–∞', error, context);
      
      case '22P02': // Invalid input syntax
        return createApiError('VALIDATION_ERROR', '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö', error, context);
      
      default:
        return createApiError('DATABASE_ERROR', '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', error, context);
    }
  }

  return createApiError('DATABASE_ERROR', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', error, context);
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
export function handleValidationError(
  field: string,
  message: string,
  value?: any,
  context?: string
): ApiError {
  return createApiError('VALIDATION_ERROR', message, { field, value }, context);
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */
export function handleAuthError(message: string = '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', context?: string): ApiError {
  return createApiError('AUTHENTICATION_ERROR', message, undefined, context);
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
export function handleAuthzError(message: string = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤', context?: string): ApiError {
  return createApiError('AUTHORIZATION_ERROR', message, undefined, context);
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫—É –≤ HTTP –æ—Ç–≤–µ—Ç–µ
 */
export function sendErrorResponse(res: NextApiResponse, error: ApiError): void {
  const errorResponse: ErrorResponse = {
    error: error.message,
    code: error.code,
    details: error.details,
    context: error.context,
    timestamp: error.timestamp
  };

  res.status(error.status).json(errorResponse);
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
export function sendValidationErrors(
  res: NextApiResponse, 
  errors: ValidationError[], 
  context?: string
): void {
  const errorResponse: ErrorResponse = {
    error: errors.length === 1 
      ? errors[0].message 
      : `–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${errors.length} –ø–æ–ª–µ–π`,
    code: ERROR_TYPES.VALIDATION_ERROR.code,
    details: errors,
    context,
    timestamp: new Date().toISOString(),
    validationErrors: errors
  };

  res.status(ERROR_TYPES.VALIDATION_ERROR.status).json(errorResponse);
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª—é–±—É—é –æ—à–∏–±–∫—É
 */
export function handleAndSendError(
  res: NextApiResponse, 
  error: any, 
  context?: string
): void {
  let apiError: ApiError;

  if (error.code && typeof error.status === 'number') {
    // –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ API
    apiError = error;
  } else if (error.code) {
    // –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    apiError = handleDatabaseError(error, context);
  } else if (error instanceof Error) {
    // –û–±—ã—á–Ω–∞—è –æ—à–∏–±–∫–∞ JavaScript
    apiError = createApiError('INTERNAL_ERROR', error.message, error.stack, context);
  } else {
    // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞
    apiError = createApiError('INTERNAL_ERROR', '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error, context);
  }

  sendErrorResponse(res, apiError);
}

/**
 * Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ API —Ä–æ—É—Ç–∞—Ö
 */
export function withErrorHandling<T extends any[]>(
  handler: (...args: T) => Promise<void>
) {
  return async (req: any, res: NextApiResponse, ...args: any[]): Promise<void> => {
    try {
      await handler(req, res, ...args);
    } catch (error) {
      handleAndSendError(res, error, `${req.method} ${req.url}`);
    }
  };
}

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
 */
export function logError(error: any, context?: string): void {
  const timestamp = new Date().toISOString();
  const errorInfo = {
    timestamp,
    context,
    error: error instanceof Error ? {
      message: error.message,
      stack: error.stack,
      name: error.name
    } : error
  };

  console.error('üö® API Error:', JSON.stringify(errorInfo, null, 2));
}
