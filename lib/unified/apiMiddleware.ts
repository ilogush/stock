import { NextApiRequest, NextApiResponse } from 'next';
import { withErrorHandling } from './errorHandler';
import { sendValidationErrors } from './errorHandler';
import { validator, validationSchemas } from './validator';

/**
 * –ï–¥–∏–Ω—ã–π API middleware –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ä–æ—É—Ç–æ–≤
 */

export interface ApiHandler {
  (req: NextApiRequest, res: NextApiResponse): Promise<void>;
}

export interface ApiConfig {
  methods: string[];
  validation?: {
    body?: Record<string, any>;
    query?: Record<string, any>;
  };
  auth?: boolean;
  rateLimit?: {
    windowMs: number;
    max: number;
  };
}

/**
 * –ë–∞–∑–æ–≤—ã–π middleware –¥–ª—è API —Ä–æ—É—Ç–æ–≤
 */
export function createApiHandler(
  config: ApiConfig,
  handler: ApiHandler
): ApiHandler {
  let wrappedHandler = handler;

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
  wrappedHandler = withErrorHandling(wrappedHandler);


  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
  return async (req: NextApiRequest, res: NextApiResponse) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥
    if (!config.methods.includes(req.method || '')) {
      res.status(405).json({
        error: `–ú–µ—Ç–æ–¥ ${req.method} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`,
        allowedMethods: config.methods
      });
      return;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if (config.validation?.query) {
      const queryResult = validator.validateObject(req.query, config.validation.query);
      if (!queryResult.isValid) {
        sendValidationErrors(res, queryResult.errors, 'query validation');
        return;
      }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è body
    if (config.validation?.body && (req.method === 'POST' || req.method === 'PUT' || req.method === 'PATCH')) {
      const bodyResult = validator.validateObject(req.body, config.validation.body);
      if (!bodyResult.isValid) {
        sendValidationErrors(res, bodyResult.errors, 'body validation');
        return;
      }
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    await wrappedHandler(req, res);
  };
}

/**
 * –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ API
 */
export const apiConfigs = {
  // CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤
  list: (cacheType: keyof typeof cacheMiddleware = 'products'): ApiConfig => ({
    methods: ['GET'],
    cache: cacheType,
    validation: {
      query: {
        page: [{ type: 'number' }],
        limit: [{ type: 'number' }],
        search: [{ type: 'string' }]
      }
    }
  }),

  // CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
  item: (cacheType: keyof typeof cacheMiddleware = 'products'): ApiConfig => ({
    methods: ['GET', 'PUT', 'DELETE'],
    cache: cacheType,
    validation: {
      query: {
        id: [{ type: 'required' }, { type: 'number' }]
      }
    }
  }),

  // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
  create: (validationSchema: Record<string, any>): ApiConfig => ({
    methods: ['POST'],
    cache: 'no-cache',
    validation: {
      body: validationSchema
    }
  }),

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
  update: (validationSchema: Record<string, any>): ApiConfig => ({
    methods: ['PUT', 'PATCH'],
    cache: 'no-cache',
    validation: {
      body: validationSchema
    }
  }),

  // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
  delete: (): ApiConfig => ({
    methods: ['DELETE'],
    cache: 'no-cache'
  }),

  // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
  auth: (): ApiConfig => ({
    methods: ['POST'],
    cache: 'no-cache'
  }),

  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
  static: (): ApiConfig => ({
    methods: ['GET'],
    cache: 'colors' // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  })
};

/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö API —Ä–æ—É—Ç–æ–≤
 */
export const apiUtils = {
  /**
   * –°–æ–∑–¥–∞–µ—Ç GET —Ä–æ—É—Ç –¥–ª—è —Å–ø–∏—Å–∫–∞
   */
  createListRoute: (
    handler: ApiHandler,
    cacheType: keyof typeof cacheMiddleware = 'products'
  ) => createApiHandler(apiConfigs.list(cacheType), handler),

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ä–æ—É—Ç –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏
   */
  createItemRoute: (
    handler: ApiHandler,
    cacheType: keyof typeof cacheMiddleware = 'products'
  ) => createApiHandler(apiConfigs.item(cacheType), handler),

  /**
   * –°–æ–∑–¥–∞–µ—Ç POST —Ä–æ—É—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
   */
  createCreateRoute: (
    handler: ApiHandler,
    validationSchema: Record<string, any>
  ) => createApiHandler(apiConfigs.create(validationSchema), handler),

  /**
   * –°–æ–∑–¥–∞–µ—Ç PUT/PATCH —Ä–æ—É—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  createUpdateRoute: (
    handler: ApiHandler,
    validationSchema: Record<string, any>
  ) => createApiHandler(apiConfigs.update(validationSchema), handler),

  /**
   * –°–æ–∑–¥–∞–µ—Ç DELETE —Ä–æ—É—Ç
   */
  createDeleteRoute: (handler: ApiHandler) => 
    createApiHandler(apiConfigs.delete(), handler),

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ä–æ—É—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  createStaticRoute: (handler: ApiHandler) => 
    createApiHandler(apiConfigs.static(), handler)
};

/**
 * Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤
 */
export function withLogging(handler: ApiHandler): ApiHandler {
  return async (req: NextApiRequest, res: NextApiResponse) => {
    const start = Date.now();
    const { method, url, query, body } = req;

    console.log(`üöÄ API ${method} ${url}`, {
      query: Object.keys(query).length > 0 ? query : undefined,
      body: body && Object.keys(body).length > 0 ? body : undefined
    });

    await handler(req, res);

    const duration = Date.now() - start;
    const status = res.statusCode;

    console.log(`‚úÖ API ${method} ${url} - ${status} (${duration}ms)`);
  };
}

/**
 * Middleware –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
export function withPerformanceTracking(handler: ApiHandler): ApiHandler {
  return async (req: NextApiRequest, res: NextApiResponse) => {
    const start = Date.now();
    const startMemory = process.memoryUsage();

    await handler(req, res);

    const duration = Date.now() - start;
    const endMemory = process.memoryUsage();
    const memoryDelta = endMemory.heapUsed - startMemory.heapUsed;

    // –õ–æ–≥–∏—Ä—É–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    if (duration > 1000) {
      console.warn(`üêå –ú–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: ${req.method} ${req.url} - ${duration}ms (${memoryDelta} bytes)`);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    res.setHeader('X-Response-Time', `${duration}ms`);
    res.setHeader('X-Memory-Delta', `${memoryDelta} bytes`);
  };
}

/**
 * –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π middleware –¥–ª—è –≤—Å–µ—Ö API —Ä–æ—É—Ç–æ–≤
 */
export function withApiMiddleware(
  config: ApiConfig,
  handler: ApiHandler,
  options: {
    logging?: boolean;
    performance?: boolean;
  } = {}
): ApiHandler {
  let wrappedHandler = handler;

  // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  if (options.logging !== false) {
    wrappedHandler = withLogging(wrappedHandler);
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  if (options.performance !== false) {
    wrappedHandler = withPerformanceTracking(wrappedHandler);
  }

  // –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
  return createApiHandler(config, wrappedHandler);
}
